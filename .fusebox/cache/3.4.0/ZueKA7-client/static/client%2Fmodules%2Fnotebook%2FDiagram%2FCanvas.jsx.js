module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst _ = require(\"lodash\");\r\nconst React = require(\"react\");\r\nconst storm_react_diagrams_1 = require(\"storm-react-diagrams\");\r\nconst CogliteLinkFactory_1 = require(\"./CogliteLinkFactory\");\r\nconst CogliteNodeFactory_1 = require(\"./CogliteNodeFactory\");\r\nconst CogliteNodeModel_1 = require(\"./CogliteNodeModel\");\r\nconst CoglitePortModel_1 = require(\"./CoglitePortModel\");\r\nconst SimplePortFactory_1 = require(\"./SimplePortFactory\");\r\nconst CogliteDiagramWidget_1 = require(\"./CogliteDiagramWidget\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nlet Canvas = class Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.restoreFormData = (newModel) => {\r\n            const { nodeFormsData } = this.props.store.uiStore;\r\n            const currentJsonFormsStoreData = this.props.jsonFormsStore.coreStore.data;\r\n            const currentNodeId = newModel.model.id;\r\n            const currentCogType = newModel.model.cogType;\r\n            let currentImp = null;\r\n            if (nodeFormsData[currentCogType]) {\r\n                currentImp = nodeFormsData[currentCogType][currentNodeId];\r\n                if (!currentImp)\r\n                    currentImp = {};\r\n            }\r\n            if (currentImp) {\r\n                currentJsonFormsStoreData[currentCogType] = currentImp;\r\n                this.props.jsonFormsStore.coreStore.setData(currentJsonFormsStoreData);\r\n            }\r\n        };\r\n        this.handleNodeFormAction = (model) => {\r\n            const { nodeFormDrawerToggle } = this.props.store.uiStore;\r\n            if (model.model.type === \"coglite\") {\r\n                this.restoreFormData(model);\r\n                this.props.store.uiStore.updateActiveCogliteNodeModel(model);\r\n                nodeFormDrawerToggle.openDrawer(true);\r\n            }\r\n        };\r\n        this.diagramEngine = new storm_react_diagrams_1.DiagramEngine();\r\n        this.diagramEngine.installDefaultFactories();\r\n        this.initialiseModel();\r\n    }\r\n    initialiseModel() {\r\n        this.diagramEngine.registerLinkFactory(new CogliteLinkFactory_1.CogliteLinkFactory());\r\n        this.diagramEngine.registerPortFactory(new SimplePortFactory_1.SimplePortFactory(\"coglite\", config => new CoglitePortModel_1.CoglitePortModel()));\r\n        this.diagramEngine.registerNodeFactory(new CogliteNodeFactory_1.CogliteNodeFactory());\r\n        var model = new storm_react_diagrams_1.DiagramModel();\r\n        var node2 = new CogliteNodeModel_1.CogliteNodeModel(\"cogliteInput\", \"Input\");\r\n        node2.setPosition(100, 100);\r\n        var node4 = new CogliteNodeModel_1.CogliteNodeModel(\"cogliteFunctionMath\", \"Math\");\r\n        node4.setPosition(350, 100);\r\n        const node5 = new CogliteNodeModel_1.CogliteNodeModel(\"cogliteDebug\", \"Output\");\r\n        node5.setPosition(600, 100);\r\n        var link3 = node2.getPort(\"rightCenter\").link(node4.getPort(\"leftCenter\"));\r\n        const link5 = node4.getPort(\"rightCenter\").link(node5.getPort(\"leftCenter\"));\r\n        model.addAll(node2, node4, link3, node5, link5);\r\n        this.diagramEngine.setDiagramModel(model);\r\n        this.props.store.uiStore.setDiagramModel(this.diagramEngine.diagramModel);\r\n    }\r\n    componentDidMount() {\r\n        this.forceUpdate();\r\n    }\r\n    render() {\r\n        return (React.createElement(\"div\", { className: \"diagram-layer\", onDrop: event => {\r\n                const data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\r\n                const currentNodes = this.diagramEngine.getDiagramModel().getNodes();\r\n                const currentNodesKeys = _.keys(currentNodes);\r\n                const isConflictingInput = currentNodesKeys.map(key => currentNodes[key]).find(model => model.cogType === \"cogliteInput\") && data.type === \"cogliteInput\";\r\n                if (isConflictingInput) {\r\n                    alert(\"Cannot add more than one input in a flow\");\r\n                }\r\n                else {\r\n                    let node = null;\r\n                    if (data.type === \"cogliteInput\") {\r\n                        node = new CogliteNodeModel_1.CogliteNodeModel(\"cogliteInput\", \"Node \" + (currentNodesKeys.length + 1), \"rgb(192,255,0)\");\r\n                    }\r\n                    else if (data.type === \"cogliteFunctionMath\") {\r\n                        node = new CogliteNodeModel_1.CogliteNodeModel(\"cogliteFunctionMath\", \"Node \" + (currentNodesKeys.length + 1), \"rgb(0,192,255)\");\r\n                    }\r\n                    else {\r\n                        node = new CogliteNodeModel_1.CogliteNodeModel(\"cogliteDebug\", \"Node \" + (currentNodesKeys.length + 1), \"rgb(0,192,255)\");\r\n                    }\r\n                    var points = this.diagramEngine.getRelativeMousePoint(event);\r\n                    node.x = points.x;\r\n                    node.y = points.y;\r\n                    this.diagramEngine.getDiagramModel().addNode(node);\r\n                    this.forceUpdate();\r\n                }\r\n            }, onDragOver: event => {\r\n            } },\r\n            React.createElement(CogliteDiagramWidget_1.default, { formAction: this.handleNodeFormAction, className: \"srd-coglite-canvas\", diagramEngine: this.diagramEngine })));\r\n    }\r\n};\r\nCanvas = tslib_1.__decorate([\r\n    mobx_react_1.inject(\"store\", \"jsonFormsStore\"),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], Canvas);\r\nexports.Canvas = Canvas;\r\n",
dependencies: ["tslib","lodash","react","storm-react-diagrams","./CogliteLinkFactory","./CogliteNodeFactory","./CogliteNodeModel","./CoglitePortModel","./SimplePortFactory","./CogliteDiagramWidget","mobx-react"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689124,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
