module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nvar electron = require('electron');\r\nconst electron_1 = require(\"electron\");\r\nvar currentWindow = electron.remote.getCurrentWindow();\r\nconst lodash_1 = require(\"lodash\");\r\nconst mobx_1 = require(\"mobx\");\r\nconst React = require(\"react\");\r\nconst workflow_loader_1 = require(\"../../workflow-loader\");\r\nconst step_code_editor_1 = require(\"./../step-code-editor\");\r\nconst state_1 = require(\"../../models/state\");\r\nconst workflow_1 = require(\"../../models/workflow\");\r\nconst workflow_service_1 = require(\"../../services/workflow_service\");\r\nconst scriptEditorFactory = (step, fieldName) => React.createElement(step_code_editor_1.StepCodeEditor, { step: step, fieldName: fieldName });\r\nconst externalBrowserLinkFactory = (link, text) => React.createElement(\"a\", { href: \"#\", onClick: _ => electron.shell.openExternal('https://stack.foundation/#!' + link) },\r\n    \" \",\r\n    text,\r\n    \" \");\r\nclass UIState {\r\n    constructor() {\r\n        this.projectName = '';\r\n        this.projectPath = '';\r\n        this.projectWorkflows = [];\r\n        this.workflowName = '';\r\n        this.workflowPath = '';\r\n        this.yaml = false;\r\n        this.yamlError = false;\r\n    }\r\n}\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], UIState.prototype, \"projectName\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], UIState.prototype, \"projectPath\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", Array)\r\n], UIState.prototype, \"projectWorkflows\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], UIState.prototype, \"workflowName\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], UIState.prototype, \"workflowPath\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", Boolean)\r\n], UIState.prototype, \"yaml\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", Boolean)\r\n], UIState.prototype, \"yamlError\", void 0);\r\nexports.UIState = UIState;\r\nclass DesignerState {\r\n    constructor() {\r\n        this.dirty = false;\r\n        this.originalYaml = '';\r\n        this.yamlMode = false;\r\n        this.yaml = '';\r\n        this.uiState = new UIState();\r\n        this.ipcEventCallbacks = {\r\n            new: () => this.newWorkflow(),\r\n            open: () => this.openWorkflow(),\r\n            save: () => this.saveWorkflow(),\r\n            saveAs: () => this.saveWorkflowAs(),\r\n        };\r\n        this.updateWorkflow = (yaml) => {\r\n            try {\r\n                let workflow = workflow_loader_1.loadWorkflow(yaml);\r\n                this.editorState.workflow = workflow_1.Workflow.apply(workflow);\r\n                this.editorState.selectInitialStep();\r\n                this.uiState.yamlError = false;\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                this.uiState.yamlError = true;\r\n                return false;\r\n            }\r\n        };\r\n        this.saveWorkflowAs = (savePath) => {\r\n            if (!savePath) {\r\n                let path = electron.remote.dialog.showSaveDialog(currentWindow, {\r\n                    title: \"Save workflow as\",\r\n                    filters: [\r\n                        { name: 'Workflows', extensions: ['wflow'] }\r\n                    ]\r\n                });\r\n                if (!path || path.length === 0) {\r\n                    return false;\r\n                }\r\n                savePath = path;\r\n            }\r\n            if (this.uiState.yaml) {\r\n                fs.writeFileSync(savePath, this.yaml);\r\n                this.updateWorkflow(this.yaml);\r\n            }\r\n            else {\r\n                this.yaml = this.workflowToYaml();\r\n                fs.writeFileSync(savePath, this.yaml);\r\n            }\r\n            this.resetDirtyCheck();\r\n            this.updateUiState(savePath);\r\n            return true;\r\n        };\r\n        this.saveWorkflow = () => {\r\n            if (this.uiState.workflowPath && this.uiState.workflowPath.length > 0) {\r\n                return this.saveWorkflowAs(this.uiState.workflowPath);\r\n            }\r\n            return this.saveWorkflowAs();\r\n        };\r\n        this.openWorkflow = (workflowPath) => {\r\n            if (!this.runDirtyFileCheck()) {\r\n                return;\r\n            }\r\n            if (!workflowPath) {\r\n                let path = electron.remote.dialog.showOpenDialog(currentWindow, {\r\n                    title: \"Open workflow\",\r\n                    filters: [\r\n                        { name: 'Workflows', extensions: ['wflow'] }\r\n                    ]\r\n                });\r\n                if (!path || path.length === 0) {\r\n                    return;\r\n                }\r\n                workflowPath = path[0];\r\n            }\r\n            this.uiState.workflowPath = workflowPath;\r\n            let buffer = fs.readFileSync(workflowPath);\r\n            if (buffer) {\r\n                if (!this.updateWorkflow(buffer.toString())) {\r\n                    this.setMode(true);\r\n                }\r\n                this.updateYaml(buffer.toString());\r\n                this.editorState.catalog = this.catalog;\r\n                this.resetDirtyCheck();\r\n            }\r\n            this.updateUiState(workflowPath);\r\n        };\r\n        this.newWorkflow = () => {\r\n            if (!this.runDirtyFileCheck()) {\r\n                return;\r\n            }\r\n            this.editorState.workflow = new workflow_1.Workflow();\r\n            this.editorState.selectInitialStep();\r\n            this.yaml = this.workflowToYaml();\r\n            this.editorState.catalog = this.catalog;\r\n            this.resetDirtyCheck();\r\n            this.updateUiState();\r\n        };\r\n        let state = new state_1.EditorState();\r\n        new workflow_service_1.WorkflowService().getWorkflowImagesCatalog()\r\n            .then(response => {\r\n            this.catalog = response;\r\n            state.catalog = this.catalog;\r\n        });\r\n        state.workflow = new workflow_1.Workflow({});\r\n        state.ide = false;\r\n        state.allowCalls = true;\r\n        state.scriptEditorFactory = scriptEditorFactory;\r\n        state.sfLinkFactory = externalBrowserLinkFactory;\r\n        state.selectInitialStep();\r\n        this.editorState = state;\r\n        this.resetDirtyCheck();\r\n        electron_1.ipcRenderer.on('new', this.ipcEventCallbacks.new);\r\n        electron_1.ipcRenderer.on('open', this.ipcEventCallbacks.open);\r\n        electron_1.ipcRenderer.on('save', this.ipcEventCallbacks.save);\r\n        electron_1.ipcRenderer.on('saveAs', this.ipcEventCallbacks.saveAs);\r\n        let forceQuit = false;\r\n        window.onbeforeunload = (e) => {\r\n            if (!forceQuit && this.dirty) {\r\n                e.returnValue = false;\r\n                if (this.runDirtyFileCheck()) {\r\n                    forceQuit = true;\r\n                    setTimeout(() => {\r\n                        electron_1.remote.getCurrentWindow().close();\r\n                        electron_1.ipcRenderer.send('quit');\r\n                    }, 1);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    onDestroy() {\r\n        if (this.dispose) {\r\n            this.dispose();\r\n        }\r\n        electron_1.ipcRenderer.removeListener('new', this.ipcEventCallbacks.new);\r\n        electron_1.ipcRenderer.removeListener('open', this.ipcEventCallbacks.open);\r\n        electron_1.ipcRenderer.removeListener('save', this.ipcEventCallbacks.save);\r\n        electron_1.ipcRenderer.removeListener('saveAs', this.ipcEventCallbacks.saveAs);\r\n    }\r\n    setDirty(dirty) {\r\n        this.dirty = dirty;\r\n    }\r\n    quit() {\r\n        electron_1.ipcRenderer.send('quit');\r\n    }\r\n    resetDirtyCheck() {\r\n        if (this.dispose) {\r\n            this.dispose();\r\n        }\r\n        this.originalYaml = this.yaml;\r\n        this.setDirty(false);\r\n        this.dispose = mobx_1.autorun(() => {\r\n            if (!this.dirty) {\r\n                let objectDiff = this.workflowToYaml() !== this.originalYaml;\r\n                let codeDiff = this.yaml !== this.originalYaml;\r\n                if (this.uiState.yaml ? codeDiff : objectDiff) {\r\n                    this.setDirty(true);\r\n                    if (this.dispose) {\r\n                        this.dispose();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    workflowToYaml() {\r\n        let yaml = workflow_loader_1.saveWorkflow(this.editorState.workflow.toJS()).trim();\r\n        return yaml === \"{}\" ? '' : yaml;\r\n    }\r\n    updateYaml(yaml, updateWorkflow = false) {\r\n        this.yaml = yaml;\r\n        if (updateWorkflow) {\r\n            lodash_1.debounce(this.updateWorkflow, 500);\r\n        }\r\n    }\r\n    setMode(yamlMode) {\r\n        if (yamlMode === this.uiState.yaml) {\r\n            return;\r\n        }\r\n        if (yamlMode) {\r\n            this.yaml = this.workflowToYaml();\r\n        }\r\n        else {\r\n            if (!this.updateWorkflow(this.yaml)) {\r\n                return;\r\n            }\r\n        }\r\n        this.uiState.yaml = yamlMode;\r\n        this.editorState.catalog = this.catalog;\r\n    }\r\n    runDirtyFileCheck() {\r\n        if (this.dirty) {\r\n            let currentWindow = electron.remote.getCurrentWindow();\r\n            let response = electron.remote.dialog.showMessageBox(currentWindow, {\r\n                type: 'warning',\r\n                buttons: ['Yes', 'No', 'Cancel'],\r\n                noLink: true,\r\n                defaultId: 0,\r\n                cancelId: -1,\r\n                title: 'Workflow modified',\r\n                message: 'Do you want to save changes to the current workflow?'\r\n            });\r\n            if (response == -1 || response == 2) {\r\n                return false;\r\n            }\r\n            else if (response == 0) {\r\n                return this.saveWorkflow();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    updateUiState(workflowPath) {\r\n        if (workflowPath) {\r\n            this.uiState.workflowPath = workflowPath;\r\n            this.uiState.workflowName = path.basename(workflowPath);\r\n            if (this.uiState.workflowName.endsWith('.wflow')) {\r\n                this.uiState.workflowName = this.uiState.workflowName.substring(0, this.uiState.workflowName.length - 6);\r\n            }\r\n            this.uiState.projectPath = path.dirname(workflowPath);\r\n            if (path.basename(this.uiState.projectPath) == 'workflows') {\r\n                this.uiState.projectWorkflows = this.listProjectWorkflows(this.uiState.projectPath);\r\n                this.uiState.projectName = path.basename(path.dirname(this.uiState.projectPath));\r\n            }\r\n        }\r\n        else {\r\n            this.uiState = new UIState();\r\n        }\r\n    }\r\n    listProjectWorkflows(projectDirectory) {\r\n        let children = fs.readdirSync(projectDirectory);\r\n        if (children && children.length > 0) {\r\n            children = children\r\n                .filter(workflow => workflow && workflow.endsWith('.wflow'))\r\n                .map(workflow => workflow.substring(0, workflow.length - 6));\r\n        }\r\n        return children;\r\n    }\r\n}\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", Boolean)\r\n], DesignerState.prototype, \"dirty\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", typeof (_a = typeof state_1.EditorState !== \"undefined\" && state_1.EditorState) === \"function\" ? _a : Object)\r\n], DesignerState.prototype, \"editorState\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", Boolean)\r\n], DesignerState.prototype, \"yamlMode\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], DesignerState.prototype, \"yaml\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", UIState)\r\n], DesignerState.prototype, \"uiState\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Boolean]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DesignerState.prototype, \"setDirty\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DesignerState.prototype, \"resetDirtyCheck\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Object)\r\n], DesignerState.prototype, \"updateWorkflow\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String, Boolean]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DesignerState.prototype, \"updateYaml\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Boolean]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DesignerState.prototype, \"setMode\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Object)\r\n], DesignerState.prototype, \"openWorkflow\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DesignerState.prototype, \"updateUiState\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Object)\r\n], DesignerState.prototype, \"newWorkflow\", void 0);\r\nexports.DesignerState = DesignerState;\r\n",
dependencies: ["tslib","fs","path","electron","electron","lodash","mobx","react","../../workflow-loader","./../step-code-editor","../../models/state","../../models/workflow","../../services/workflow_service"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400690051,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
