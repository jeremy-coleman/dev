module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _ = require(\"lodash\");\r\nconst createLayout = (layoutType) => ({\r\n    type: layoutType,\r\n    elements: []\r\n});\r\nconst deriveType = (jsonSchema) => {\r\n    if (!_.isEmpty(jsonSchema) &&\r\n        !_.isEmpty(jsonSchema.type) &&\r\n        typeof jsonSchema.type === 'string') {\r\n        return jsonSchema.type;\r\n    }\r\n    if (!_.isEmpty(jsonSchema) &&\r\n        (!_.isEmpty(jsonSchema.properties) || !_.isEmpty(jsonSchema.additionalProperties))) {\r\n        return 'object';\r\n    }\r\n    if (!_.isEmpty(jsonSchema) && !_.isEmpty(jsonSchema.items)) {\r\n        return 'array';\r\n    }\r\n    return 'null';\r\n};\r\nconst createControlElement = (label, ref) => ({\r\n    type: 'Control',\r\n    label: label,\r\n    scope: ref,\r\n});\r\nconst isLayout = (uischema) => uischema.elements !== undefined;\r\nconst wrapInLayoutIfNecessary = (uischema, layoutType) => {\r\n    if (!_.isEmpty(uischema) && !isLayout(uischema)) {\r\n        const verticalLayout = createLayout(layoutType);\r\n        verticalLayout.elements.push(uischema);\r\n        return verticalLayout;\r\n    }\r\n    return uischema;\r\n};\r\nconst addLabel = (layout, labelName) => {\r\n    if (!_.isEmpty(labelName)) {\r\n        const label = {\r\n            type: 'Label',\r\n            text: _.startCase(labelName)\r\n        };\r\n        layout.elements.push(label);\r\n    }\r\n};\r\nconst generateUISchema = (jsonSchema, schemaElements, currentRef, schemaName, layoutType) => {\r\n    const type = deriveType(jsonSchema);\r\n    switch (type) {\r\n        case 'object':\r\n            const layout = createLayout(layoutType);\r\n            schemaElements.push(layout);\r\n            addLabel(layout, schemaName);\r\n            if (!_.isEmpty(jsonSchema.properties)) {\r\n                const nextRef = currentRef + '/properties';\r\n                Object.keys(jsonSchema.properties).map(propName => {\r\n                    const value = jsonSchema.properties[propName];\r\n                    generateUISchema(value, layout.elements, `${nextRef}/${propName}`, propName, layoutType);\r\n                });\r\n            }\r\n            return layout;\r\n        case 'array':\r\n        case 'string':\r\n        case 'number':\r\n        case 'integer':\r\n        case 'boolean':\r\n            const controlObject = createControlElement(_.startCase(schemaName), currentRef);\r\n            schemaElements.push(controlObject);\r\n            return controlObject;\r\n        case 'null':\r\n            return null;\r\n        default:\r\n            throw new Error('Unknown type: ' + JSON.stringify(jsonSchema));\r\n    }\r\n};\r\nexports.generateDefaultUISchema = (jsonSchema, layoutType = 'VerticalLayout', prefix = '#') => wrapInLayoutIfNecessary(generateUISchema(jsonSchema, [], prefix, '', layoutType), layoutType);\r\n",
dependencies: ["lodash"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689335,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
