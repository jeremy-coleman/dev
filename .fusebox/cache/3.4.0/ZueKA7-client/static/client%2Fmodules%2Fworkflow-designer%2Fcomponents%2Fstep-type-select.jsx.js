module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst React = require(\"react\");\r\nconst react_virtualized_select_1 = require(\"react-virtualized-select\");\r\nconst translation_service_1 = require(\"../services/translation-service\");\r\nconst centered_content_1 = require(\"../util/centered-content\");\r\nconst workflow_1 = require(\"../models/workflow\");\r\nlet injectSheet = require('react-jss').default;\r\nconst style_1 = require(\"../style\");\r\nconst styles = (theme) => ({\r\n    select: {\r\n        composes: `${style_1.editorStyles.mediumSelect} native-key-bindings`,\r\n    },\r\n    title: {\r\n        composes: theme.ide ? 'text-color' : '',\r\n        padding: 0,\r\n        margin: 0,\r\n        fontSize: '20px',\r\n        fontWeight: 'bold',\r\n        lineHeight: '24px'\r\n    },\r\n    description: {\r\n        composes: theme.ide ? 'text-color' : '',\r\n        padding: 0,\r\n        margin: 0,\r\n        fontSize: '14px',\r\n        lineHeight: '16px'\r\n    },\r\n    option: {\r\n        cursor: 'pointer',\r\n        margin: 0,\r\n        padding: '0 20px'\r\n    },\r\n    selected: {\r\n        composes: 'selected',\r\n    },\r\n    focused: {\r\n        composes: 'focused',\r\n    }\r\n});\r\nconst typeOptions = workflow_1.StepTypes.map(type => ({ value: type }));\r\nlet StepTypeSelect = class StepTypeSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.valueRenderer = (option) => {\r\n            let classes = this.props.classes || {};\r\n            return (React.createElement(centered_content_1.CenteredContent, { container: false },\r\n                React.createElement(\"div\", { className: classes.title }, translation_service_1.translate('TYPE_NAME_' + option.value.toUpperCase())),\r\n                React.createElement(\"div\", { className: classes.description }, translation_service_1.translate('TYPE_DESCRIPTION_' + option.value.toUpperCase()))));\r\n        };\r\n        this.optionRenderer = (options) => {\r\n            let option = options.option, classes = this.props.classes || {}, focused = options.focusedOption == option, selected = options.valueArray.indexOf(option) > -1;\r\n            return (React.createElement(centered_content_1.CenteredContent, { className: `${classes.option} ${focused ? classes.focused : ''} ${selected ? classes.selected : ''}`, key: options.key, onClick: () => options.selectValue(option), onMouseOver: () => options.focusOption(option), style: options.style },\r\n                React.createElement(\"div\", { className: classes.title }, translation_service_1.translate('TYPE_NAME_' + option.value.toUpperCase())),\r\n                React.createElement(\"div\", { className: classes.description }, translation_service_1.translate('TYPE_DESCRIPTION_' + option.value.toUpperCase()))));\r\n        };\r\n    }\r\n    placeholder() {\r\n        return (React.createElement(centered_content_1.CenteredContent, null, translation_service_1.translate('PLACEHOLDER_TYPE')));\r\n    }\r\n    render() {\r\n        let classes = this.props.classes || {};\r\n        return (React.createElement(react_virtualized_select_1.default, { className: classes.select, clearable: false, options: typeOptions, optionRenderer: this.optionRenderer, searchable: false, optionHeight: 70, maxHeight: 400, placeholder: this.placeholder(), valueRenderer: this.valueRenderer, onChange: option => this.props.onChange(option.value), value: this.props.type }));\r\n    }\r\n};\r\nStepTypeSelect = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], StepTypeSelect);\r\nexports.StepTypeSelect = StepTypeSelect;\r\n",
dependencies: ["tslib","react","react-virtualized-select","../services/translation-service","../util/centered-content","../models/workflow","react-jss","../style"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400690016,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
