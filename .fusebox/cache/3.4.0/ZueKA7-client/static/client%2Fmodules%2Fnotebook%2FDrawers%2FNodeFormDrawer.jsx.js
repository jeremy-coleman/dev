module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst React = require(\"react\");\r\nconst IconButton_1 = require(\"@material-ui/core/IconButton\");\r\nconst ArrowForward_1 = require(\"@material-ui/icons/ArrowForward\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst forms_core_1 = require(\"../forms-core\");\r\nconst FormConfig_1 = require(\"../Forms/FormConfig\");\r\nconst core_1 = require(\"@material-ui/core\");\r\nconst styled_jss_1 = require(\"styled-jss\");\r\nconst List_1 = require(\"@material-ui/core/List\");\r\nconst Divider_1 = require(\"@material-ui/core/Divider\");\r\nconst layout_1 = require(\"../../layout\");\r\nconst NodeFormDrawerDimensions = styled_jss_1.default(core_1.Card)({\r\n    minWidth: 245,\r\n    minHeight: \"100%\",\r\n    flex: \"1 1 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignmentBaseline: \"central\",\r\n    position: 'relative'\r\n});\r\nlet NodeFormDrawer = class NodeFormDrawer extends React.Component {\r\n    render() {\r\n        const { nodeFormDrawerToggle, activeCogliteNodeModel, isDynamicNodeFormUpdate } = this.props.store.uiStore;\r\n        const cogType = activeCogliteNodeModel && activeCogliteNodeModel.model.cogType;\r\n        const updateFormData = () => {\r\n            const { activeCogliteNodeModel, nodeFormsData } = this.props.store.uiStore;\r\n            const currentJsonFormsStoreData = this.props.jsonFormsStore.coreStore.data;\r\n            const currentNodeId = activeCogliteNodeModel.model.id;\r\n            for (const key of Object.keys(currentJsonFormsStoreData)) {\r\n                console.log(key, currentJsonFormsStoreData[key]);\r\n                if (nodeFormsData.hasOwnProperty(key)) {\r\n                    nodeFormsData[key][currentNodeId] = currentJsonFormsStoreData[key];\r\n                }\r\n                else {\r\n                    nodeFormsData[key] = {\r\n                        [currentNodeId]: currentJsonFormsStoreData[key]\r\n                    };\r\n                }\r\n            }\r\n            this.props.store.uiStore.updateNodeFormsData(nodeFormsData);\r\n        };\r\n        if (isDynamicNodeFormUpdate) {\r\n            updateFormData();\r\n        }\r\n        const closeDrawer = () => {\r\n            updateFormData();\r\n            nodeFormDrawerToggle.openDrawer(false);\r\n        };\r\n        const formBlock = (cogType) => {\r\n            if (cogType) {\r\n                if (cogType !== \"cogliteDebug\")\r\n                    return (React.createElement(forms_core_1.JsonForms, { className: 'test-json-forms', schema: FormConfig_1.schema[cogType], uischema: FormConfig_1.uischema[cogType], path: cogType }));\r\n                else\r\n                    return \"Check Console\";\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n        const nodeFormDrawer = (React.createElement(NodeFormDrawerDimensions, null,\r\n            React.createElement(layout_1.VerticalStretch, null,\r\n                React.createElement(core_1.Button, { onClick: updateFormData }, \"update\"),\r\n                React.createElement(\"div\", { style: nodeFormDrawerHeader },\r\n                    React.createElement(IconButton_1.default, { onClick: closeDrawer },\r\n                        React.createElement(ArrowForward_1.default, null))),\r\n                React.createElement(Divider_1.default, null),\r\n                React.createElement(List_1.default, null,\r\n                    React.createElement(\"div\", { style: formDrawerBlock },\r\n                        formBlock(cogType),\r\n                        React.createElement(core_1.Button, { variant: \"contained\", color: \"primary\", style: { margin: '8px' }, onClick: closeDrawer }, \"Done\"))))));\r\n        return nodeFormDrawer;\r\n    }\r\n};\r\nNodeFormDrawer = tslib_1.__decorate([\r\n    mobx_react_1.inject(\"store\", \"jsonFormsStore\"),\r\n    mobx_react_1.observer\r\n], NodeFormDrawer);\r\nexports.NodeFormDrawer = NodeFormDrawer;\r\nconst formDrawerBlock = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n};\r\nconst nodeFormDrawerHeader = {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\"\r\n};\r\n",
dependencies: ["tslib","react","@material-ui/core/IconButton","@material-ui/icons/ArrowForward","mobx-react","../forms-core","../Forms/FormConfig","@material-ui/core","styled-jss","@material-ui/core/List","@material-ui/core/Divider","../../layout"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689220,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
