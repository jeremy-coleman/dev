module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst core_1 = require(\"@material-ui/core\");\r\nconst _ = require(\"lodash\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst React = require(\"react\");\r\nconst core_2 = require(\"../../core\");\r\nconst react_1 = require(\"../../react\");\r\nconst MaterialTableControl_1 = require(\"./MaterialTableControl\");\r\nconst TableToolbar_1 = require(\"./TableToolbar\");\r\nclass MaterialArrayControlRenderer extends react_1.RendererComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.select = (_event, index) => {\r\n            const copy = this.state.selected.slice();\r\n            copy[index] = !copy[index];\r\n            this.setState({ selected: copy });\r\n        };\r\n        this.selectAll = (_event, checked) => {\r\n            if (checked) {\r\n                this.setState({ selected: this.createSelection(true) });\r\n                return;\r\n            }\r\n            this.setState({ selected: this.createSelection(false) });\r\n        };\r\n        this.closeConfirmDeleteDialog = () => {\r\n            this.setState({ openConfirmDelete: false });\r\n        };\r\n        this.openConfirmDeleteDialog = () => {\r\n            this.setState({ openConfirmDelete: true });\r\n        };\r\n        this.confirmDelete = () => {\r\n            const selectedIndices = this.state.selected;\r\n            const toDelete = selectedIndices.reduce((acc, value, index) => {\r\n                if (value) {\r\n                    acc.push(this.props.data[index]);\r\n                }\r\n                return acc;\r\n            }, []);\r\n            this.props.removeItems(this.props.path, toDelete)();\r\n            this.closeConfirmDeleteDialog();\r\n            this.setState({ selected: this.createSelection(false) });\r\n        };\r\n        this.isSelected = index => {\r\n            return this.state.selected[index];\r\n        };\r\n        this.createSelection = (selected) => _.fill(Array(this.props.data.length), selected);\r\n        this.state = {\r\n            selected: this.createSelection(false),\r\n            openConfirmDelete: false\r\n        };\r\n    }\r\n    render() {\r\n        const numSelected = this.state.selected ? _.filter(this.state.selected, v => v).length : 0;\r\n        const tableProps = Object.assign({ selectAll: this.selectAll, select: this.select, isSelected: this.isSelected, numSelected }, this.props);\r\n        const toolbarProps = Object.assign({ openConfirmDeleteDialog: this.openConfirmDeleteDialog, numSelected }, this.props);\r\n        const selectedCount = _.filter(this.state.selected, v => v).length;\r\n        return (React.createElement(core_1.Grid, { container: true, direction: 'column', spacing: 0 },\r\n            React.createElement(core_1.Grid, { item: true },\r\n                React.createElement(TableToolbar_1.TableToolbar, Object.assign({}, toolbarProps))),\r\n            React.createElement(core_1.Grid, { item: true },\r\n                React.createElement(MaterialTableControl_1.MaterialTableControl, Object.assign({}, tableProps))),\r\n            React.createElement(core_1.Dialog, { open: this.state.openConfirmDelete, keepMounted: true, onClose: this.closeConfirmDeleteDialog, \"aria-labelledby\": 'alert-dialog-confirmdelete-title', \"aria-describedby\": 'alert-dialog-confirmdelete-description' },\r\n                React.createElement(core_1.DialogTitle, { id: 'alert-dialog-confirmdelete-title' }, 'Confirm Deletion'),\r\n                React.createElement(core_1.DialogContent, null,\r\n                    React.createElement(core_1.DialogContentText, { id: 'alert-dialog-confirmdelete-description' },\r\n                        \"Are you sure you want to delete the \",\r\n                        selectedCount,\r\n                        \" selected objects?\")),\r\n                React.createElement(core_1.DialogActions, null,\r\n                    React.createElement(core_1.Button, { onClick: this.closeConfirmDeleteDialog, color: 'primary' }, \"No\"),\r\n                    React.createElement(core_1.Button, { onClick: this.confirmDelete, color: 'primary' }, \"Yes\")))));\r\n    }\r\n}\r\nexports.MaterialArrayControlRenderer = MaterialArrayControlRenderer;\r\nlet MaterializedArrayControlRenderer = class MaterializedArrayControlRenderer extends React.Component {\r\n    render() {\r\n        const effectiveProps = react_1.createPropsForItem(this.props, core_2.mapStoreValuesToTableControlProps, core_2.mapUpdateActionToTableControlProps);\r\n        return (React.createElement(MaterialArrayControlRenderer, Object.assign({}, effectiveProps)));\r\n    }\r\n};\r\nMaterializedArrayControlRenderer = tslib_1.__decorate([\r\n    mobx_react_1.inject(\"jsonFormsStore\"),\r\n    mobx_react_1.observer\r\n], MaterializedArrayControlRenderer);\r\nexports.default = MaterializedArrayControlRenderer;\r\n",
dependencies: ["tslib","@material-ui/core","lodash","mobx-react","react","../../core","../../react","./MaterialTableControl","./TableToolbar"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689508,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
