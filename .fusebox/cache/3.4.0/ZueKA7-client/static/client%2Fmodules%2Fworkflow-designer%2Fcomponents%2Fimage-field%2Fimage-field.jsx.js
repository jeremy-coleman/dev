module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst React = require(\"react\");\r\nconst mobx_1 = require(\"mobx\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst translation_service_1 = require(\"../../services/translation-service\");\r\nconst workflow_1 = require(\"../../models/workflow\");\r\nconst options_1 = require(\"../options\");\r\nconst catalog_image_field_1 = require(\"./catalog-image-field\");\r\nconst manual_image_field_1 = require(\"./manual-image-field\");\r\nconst step_image_field_1 = require(\"./step-image-field\");\r\nlet injectSheet = require('react-jss').default;\r\nconst styles = (theme) => ({\r\n    editor: {\r\n        marginTop: '8px'\r\n    }\r\n});\r\nlet ImageField = class ImageField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    get imageSource() {\r\n        if (this.props.step.imageSource == 'step') {\r\n            return this.props.step.imageSource;\r\n        }\r\n        let isCatalogImage = this.props.step.transient.imageSourceTypeSelected === undefined ?\r\n            this.isImageInCatalog() : this.props.step.transient.imageSourceTypeSelected === 'catalog';\r\n        return isCatalogImage ? 'catalog' : 'manual';\r\n    }\r\n    setImageSource(source) {\r\n        this.props.step.transient.imageSourceTypeSelected = source;\r\n        this.props.step.imageSource = source === 'step' ? 'step' : 'image';\r\n    }\r\n    imageSourceOption(source) {\r\n        return {\r\n            value: source,\r\n            display: (React.createElement(\"span\", null, translation_service_1.translate('SOURCE_' + source.toUpperCase())))\r\n        };\r\n    }\r\n    options() {\r\n        let options = [\r\n            this.imageSourceOption('catalog'),\r\n            this.imageSourceOption('manual')\r\n        ];\r\n        if (this.props.workflow.stepsBefore(this.props.step).length > 0) {\r\n            options.push(this.imageSourceOption('step'));\r\n        }\r\n        return options;\r\n    }\r\n    isImageInCatalog() {\r\n        let catalog = this.props.catalog || [], image = catalog_image_field_1.parseImage(this.props.step.image);\r\n        let catalogImage = catalog.find(catEntry => catEntry.name === image.image);\r\n        if (catalogImage) {\r\n            let tag = catalogImage.tags.find(tag => tag === image.tag);\r\n            if (tag) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    selectedEditor() {\r\n        switch (this.imageSource) {\r\n            case 'step':\r\n                return (React.createElement(step_image_field_1.StepImageField, { step: this.props.step, workflow: this.props.workflow }));\r\n            case 'manual':\r\n                return (React.createElement(manual_image_field_1.ManualImageField, { step: this.props.step }));\r\n            default:\r\n                return (React.createElement(catalog_image_field_1.CatalogImageField, { catalog: this.props.catalog, step: this.props.step, workflow: this.props.workflow }));\r\n        }\r\n    }\r\n    render() {\r\n        let classes = this.props.classes || {};\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(options_1.Options, { ide: this.props.ide, fill: true, options: this.options(), onChange: a => this.setImageSource(a.value), selected: this.imageSource }),\r\n            React.createElement(\"div\", { className: classes.editor }, this.selectedEditor())));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof workflow_1.UXImageSourceType !== \"undefined\" && workflow_1.UXImageSourceType) === \"function\" ? _a : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ImageField.prototype, \"setImageSource\", null);\r\nImageField = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], ImageField);\r\nexports.ImageField = ImageField;\r\n",
dependencies: ["tslib","react","mobx","mobx-react","../../services/translation-service","../../models/workflow","../options","./catalog-image-field","./manual-image-field","./step-image-field","react-jss"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689804,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
