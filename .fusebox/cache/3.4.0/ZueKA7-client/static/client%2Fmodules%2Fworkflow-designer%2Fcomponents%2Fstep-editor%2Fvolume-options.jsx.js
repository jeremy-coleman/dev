module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst React = require(\"react\");\r\nconst mobx_1 = require(\"mobx\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst fa_1 = require(\"react-icons/fa\");\r\nconst workflow_1 = require(\"../../models/workflow\");\r\nconst volume_editor_1 = require(\"./volume-editor\");\r\nconst style_1 = require(\"../../style\");\r\nlet injectSheet = require('react-jss').default;\r\nconst jssStyles = (theme) => {\r\n    return {\r\n        fieldBlock: {\r\n            composes: 'pure-g block-force base-border-color component-padding-bottom',\r\n            borderBottomWidth: theme.ide ? '1px' : '0px',\r\n            borderBottomStyle: 'solid',\r\n            '&:last-child': {\r\n                borderBottom: 'none',\r\n                paddingBottom: '0px'\r\n            },\r\n            [style_1.mediaQueries.lg]: {\r\n                borderBottom: 'none',\r\n                paddingBottom: '0px'\r\n            }\r\n        },\r\n        optionSettings: {\r\n            composes: 'pure-u-1 pure-u-lg-1-6',\r\n            textAlign: 'right',\r\n            paddingLeft: '0px',\r\n            [style_1.mediaQueries.lg]: {\r\n                paddingLeft: '10px'\r\n            }\r\n        },\r\n        deleteButton: {\r\n            composes: theme.ide ? 'btn btn-error btn-block' : 'pure-button danger',\r\n            width: '100%',\r\n            display: 'block',\r\n            '& > svg': {\r\n                position: 'relative',\r\n                display: 'inline-block',\r\n                top: '-0.10em'\r\n            }\r\n        },\r\n        editorDiv: {\r\n            composes: 'pure-u-1 pure-u-lg-5-6'\r\n        }\r\n    };\r\n};\r\nclass EditorState {\r\n    constructor(step, volume, committed) {\r\n        this.step = step;\r\n        this.volume = volume;\r\n        this.committed = committed;\r\n    }\r\n    commitIfNecessary() {\r\n        if (!this.committed) {\r\n            if (!this.step.volumes) {\r\n                this.step.volumes = [];\r\n            }\r\n            this.step.volumes.push(this.volume);\r\n            this.committed = true;\r\n        }\r\n    }\r\n}\r\nclass EditorVolume {\r\n    constructor() {\r\n        this.mountPath = '';\r\n        this.hostPath = '';\r\n    }\r\n}\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], EditorVolume.prototype, \"mountPath\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], EditorVolume.prototype, \"hostPath\", void 0);\r\nlet VolumeOptions = class VolumeOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    get volumes() {\r\n        return this.props.step.volumes;\r\n    }\r\n    remove(volume) {\r\n        this.volumes.splice(this.volumes.indexOf(volume), 1);\r\n    }\r\n    volumeEditor(volume, key, committed) {\r\n        let state = new EditorState(this.props.step, volume, committed), classes = this.props.classes, editor = (React.createElement(volume_editor_1.VolumeEditor, { volume: volume, onChange: () => state.commitIfNecessary() }));\r\n        return (React.createElement(\"div\", { className: classes.fieldBlock, key: key },\r\n            React.createElement(\"div\", { className: classes.editorDiv }, editor),\r\n            React.createElement(\"div\", { className: classes.optionSettings }, committed && this.deleteButton(volume))));\r\n    }\r\n    deleteButton(volume) {\r\n        return React.createElement(\"div\", { className: \"pure-g\" },\r\n            React.createElement(\"div\", { className: \"pure-u-1-4 pure-u-lg-0\" }),\r\n            React.createElement(\"div\", { className: \"pure-u-3-4 pure-u-lg-1\" },\r\n                React.createElement(\"button\", { className: this.props.classes.deleteButton, onClick: e => this.remove(volume) },\r\n                    React.createElement(fa_1.FaTimesCircle, null),\r\n                    \" Remove\")));\r\n    }\r\n    sourceEditors() {\r\n        let editors = [];\r\n        if (this.volumes) {\r\n            for (let i = 0; i <= this.volumes.length; i++) {\r\n                let volume = undefined;\r\n                let committed = false;\r\n                if (i < this.volumes.length) {\r\n                    volume = this.volumes[i];\r\n                    committed = true;\r\n                }\r\n                else {\r\n                    volume = new EditorVolume();\r\n                }\r\n                editors.push(this.volumeEditor(volume, i, committed));\r\n            }\r\n        }\r\n        else {\r\n            editors.push(this.volumeEditor(new EditorVolume(), 0, false));\r\n        }\r\n        return editors;\r\n    }\r\n    render() {\r\n        return (React.createElement(\"div\", null, this.sourceEditors()));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof workflow_1.Volume !== \"undefined\" && workflow_1.Volume) === \"function\" ? _a : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], VolumeOptions.prototype, \"remove\", null);\r\nVolumeOptions = tslib_1.__decorate([\r\n    injectSheet(jssStyles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], VolumeOptions);\r\nexports.VolumeOptions = VolumeOptions;\r\n",
dependencies: ["tslib","react","mobx","mobx-react","react-icons/fa","../../models/workflow","./volume-editor","../../style","react-jss"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689981,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
