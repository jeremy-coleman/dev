module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ADDITIONAL_PROPERTIES = 'additionalProperties';\r\nconst REQUIRED_PROPERTIES = 'required';\r\nconst distinct = (array, discriminator) => {\r\n    const known = {};\r\n    return array.filter(item => {\r\n        const discriminatorValue = discriminator(item);\r\n        if (known.hasOwnProperty(discriminatorValue)) {\r\n            return false;\r\n        }\r\n        else {\r\n            known[discriminatorValue] = true;\r\n            return true;\r\n        }\r\n    });\r\n};\r\nclass Gen {\r\n    constructor(findOption) {\r\n        this.findOption = findOption;\r\n        this.schemaObject = (data) => {\r\n            const props = this.properties(data);\r\n            const schema = {\r\n                'type': 'object',\r\n                'properties': props,\r\n                'additionalProperties': this.findOption(props)(ADDITIONAL_PROPERTIES)\r\n            };\r\n            const required = this.findOption(props)(REQUIRED_PROPERTIES);\r\n            if (required.length > 0) {\r\n                schema.required = required;\r\n            }\r\n            return schema;\r\n        };\r\n        this.properties = (data) => {\r\n            const emptyProps = {};\r\n            return Object\r\n                .keys(data)\r\n                .reduce((acc, propName) => {\r\n                acc[propName] = this.property(data[propName]);\r\n                return acc;\r\n            }, emptyProps);\r\n        };\r\n        this.property = (data) => {\r\n            switch (typeof data) {\r\n                case 'string':\r\n                    return { 'type': 'string' };\r\n                case 'boolean':\r\n                    return { 'type': 'boolean' };\r\n                case 'number':\r\n                    if (Number.isInteger(data)) {\r\n                        return { 'type': 'integer' };\r\n                    }\r\n                    return { 'type': 'number' };\r\n                case 'object':\r\n                    if (data == null) {\r\n                        return { 'type': 'null' };\r\n                    }\r\n                    return this.schemaObjectOrArray(data);\r\n                default:\r\n                    return {};\r\n            }\r\n        };\r\n        this.schemaObjectOrArray = (data) => {\r\n            if (data instanceof Array) {\r\n                return this.schemaArray(data);\r\n            }\r\n            else {\r\n                return this.schemaObject(data);\r\n            }\r\n        };\r\n        this.schemaArray = (data) => {\r\n            if (data.length > 0) {\r\n                const allProperties = data.map(this.property);\r\n                const uniqueProperties = distinct(allProperties, prop => JSON.stringify(prop));\r\n                if (uniqueProperties.length === 1) {\r\n                    return {\r\n                        'type': 'array',\r\n                        'items': uniqueProperties[0]\r\n                    };\r\n                }\r\n                else {\r\n                    return {\r\n                        'type': 'array',\r\n                        'items': {\r\n                            'oneOf': uniqueProperties\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    'type': 'array',\r\n                    'items': {}\r\n                };\r\n            }\r\n        };\r\n    }\r\n}\r\nexports.generateJsonSchema = (instance, options = {}) => {\r\n    const findOption = (props) => (optionName) => {\r\n        switch (optionName) {\r\n            case ADDITIONAL_PROPERTIES:\r\n                if (options.hasOwnProperty(ADDITIONAL_PROPERTIES)) {\r\n                    return options[ADDITIONAL_PROPERTIES];\r\n                }\r\n                return true;\r\n            case REQUIRED_PROPERTIES:\r\n                if (options.hasOwnProperty(REQUIRED_PROPERTIES)) {\r\n                    return options[REQUIRED_PROPERTIES](props);\r\n                }\r\n                return Object.keys(props);\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const gen = new Gen(findOption);\r\n    return gen.schemaObject(instance);\r\n};\r\n",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689328,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
