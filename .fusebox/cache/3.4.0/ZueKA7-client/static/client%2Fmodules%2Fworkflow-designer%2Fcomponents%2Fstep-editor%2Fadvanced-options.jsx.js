module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst React = require(\"react\");\r\nconst mobx_1 = require(\"mobx\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nlet injectSheet = require('react-jss').default;\r\nconst source_options_1 = require(\"./source-options\");\r\nconst failure_options_1 = require(\"./failure-options\");\r\nconst variables_editor_1 = require(\"./variables-editor\");\r\nconst volume_options_1 = require(\"./volume-options\");\r\nconst health_options_1 = require(\"./health-options\");\r\nconst drop_down_menu_1 = require(\"../drop-down-menu\");\r\nconst translation_service_1 = require(\"../../services/translation-service\");\r\nconst style_1 = require(\"../../style\");\r\nconst tooltip_1 = require(\"../../components/tooltip\");\r\nconst variable_editor_1 = require(\"../../components/step-editor/variable-editor\");\r\nconst port_editor_1 = require(\"../../components/step-editor/port-editor\");\r\nconst styles = (theme) => {\r\n    let section = style_1.sectionStyles(theme);\r\n    return Object.assign({\r\n        advanced: {\r\n            composes: 'pure-u-1 block',\r\n            marginTop: '16px'\r\n        },\r\n        link: {\r\n            color: '#4E73BD',\r\n            fontWeight: '700',\r\n            textDecoration: 'none',\r\n            '&:hover': {\r\n                color: '#34518b',\r\n                textDecoration: 'none'\r\n            },\r\n            '&:visited': {\r\n                textDecoration: 'none'\r\n            }\r\n        }\r\n    }, section);\r\n};\r\nlet AdvancedOptions = class AdvancedOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    setup(props) {\r\n        props.step.transient.healthConfigured = props.step.health.filled();\r\n    }\r\n    componentWillMount() {\r\n        this.setup(this.props);\r\n    }\r\n    componentWillReceiveProps(newProps) {\r\n        this.setup(newProps);\r\n    }\r\n    get transient() {\r\n        return this.props.step.transient;\r\n    }\r\n    get healthConfigured() {\r\n        if (this.transient.healthConfigured) {\r\n            return true;\r\n        }\r\n        if (this.props.step.health) {\r\n            return this.props.step.health.filled();\r\n        }\r\n        return false;\r\n    }\r\n    get readinessConfigured() {\r\n        if (this.transient.readinessConfigured) {\r\n            return true;\r\n        }\r\n        if (this.props.step.readiness) {\r\n            return this.props.step.readiness.filled();\r\n        }\r\n        return false;\r\n    }\r\n    get environmentConfigured() {\r\n        if (this.transient.environmentConfigured) {\r\n            return true;\r\n        }\r\n        return this.props.step.environment && this.props.step.environment.length > 0;\r\n    }\r\n    get volumesConfigured() {\r\n        if (this.transient.volumesConfigured) {\r\n            return true;\r\n        }\r\n        return this.props.step.volumes && this.props.step.volumes.length > 0;\r\n    }\r\n    get portsConfigured() {\r\n        if (this.transient.portsConfigured) {\r\n            return true;\r\n        }\r\n        return this.props.step.ports && this.props.step.ports.length > 0;\r\n    }\r\n    get sourceOptions() {\r\n        if (this.transient.sourceOptions) {\r\n            return true;\r\n        }\r\n        return this.props.step.omitSource ||\r\n            (this.props.step.sourceLocation && this.props.step.sourceLocation.length > 0 &&\r\n                this.props.step.sourceLocation !== '/app');\r\n    }\r\n    get failureOptions() {\r\n        if (this.transient.failureOptions) {\r\n            return true;\r\n        }\r\n        return this.props.step.ignoreFailure || this.props.step.ignoreMissing || this.props.step.ignoreValidation;\r\n    }\r\n    section(title, body, helpMessage) {\r\n        const classes = this.props.classes || {};\r\n        return (React.createElement(\"div\", { className: classes.section },\r\n            React.createElement(\"div\", { className: classes.sectionTitle },\r\n                title,\r\n                helpMessage && React.createElement(tooltip_1.InfoTooltip, { className: classes.sectionTooltip }, helpMessage)),\r\n            React.createElement(\"div\", { className: classes.sectionBody }, body)));\r\n    }\r\n    runAction(action) {\r\n        action();\r\n    }\r\n    button(label, handler) {\r\n        return {\r\n            display: React.createElement(\"span\", null, label),\r\n            onClick: () => this.runAction(handler)\r\n        };\r\n    }\r\n    get additionalAdvancedOptionsAvailable() {\r\n        return !this.sourceOptions ||\r\n            !this.failureOptions ||\r\n            !this.healthConfigured ||\r\n            !this.readinessConfigured ||\r\n            !this.environmentConfigured ||\r\n            !this.volumesConfigured ||\r\n            !this.portsConfigured;\r\n    }\r\n    generateOptionItems() {\r\n        let items = [];\r\n        if (this.props.step.type === 'service') {\r\n            if (!this.healthConfigured) {\r\n                items.push(this.button(translation_service_1.translate('CONFIGURE_HEALTH'), () => this.transient.healthConfigured = true));\r\n            }\r\n            if (!this.readinessConfigured) {\r\n                items.push(this.button(translation_service_1.translate('CONFIGURE_READINESS'), () => this.transient.readinessConfigured = true));\r\n            }\r\n        }\r\n        if (!this.environmentConfigured) {\r\n            items.push(this.button(translation_service_1.translate('CONFIGURE_ENVIRONMENT'), () => this.transient.environmentConfigured = true));\r\n        }\r\n        if (!this.portsConfigured) {\r\n            items.push(this.button(translation_service_1.translate('CONFIGURE_PORTS'), () => this.transient.portsConfigured = true));\r\n        }\r\n        if (!this.volumesConfigured) {\r\n            items.push(this.button(translation_service_1.translate('CONFIGURE_VOLUMES'), () => this.transient.volumesConfigured = true));\r\n        }\r\n        if (!this.sourceOptions) {\r\n            items.push(this.button(translation_service_1.translate('CONFIGURE_SOURCE'), () => this.transient.sourceOptions = true));\r\n        }\r\n        if (!this.failureOptions) {\r\n            items.push(this.button(translation_service_1.translate('CONFIGURE_FAILURE'), () => this.transient.failureOptions = true));\r\n        }\r\n        return items;\r\n    }\r\n    render() {\r\n        let step = this.props.step;\r\n        const classes = this.props.classes || {};\r\n        let items = this.generateOptionItems();\r\n        return (React.createElement(\"div\", { className: classes.advanced },\r\n            step.type === 'service' && this.healthConfigured &&\r\n                this.section(translation_service_1.translate('TITLE_HEALTH'), React.createElement(health_options_1.HealthOptions, { step: step, ide: this.props.ide }), React.createElement(\"div\", null,\r\n                    translation_service_1.translate('HELP_HEALTH_TEXT'),\r\n                    React.createElement(\"br\", null),\r\n                    React.createElement(\"br\", null),\r\n                    this.props.sfLinkFactory(\"/docs/workflows#health\", translation_service_1.translate('HELP_HEALTH_LINK')))),\r\n            step.type === 'service' && this.readinessConfigured &&\r\n                this.section(translation_service_1.translate('TITLE_READINESS'), React.createElement(health_options_1.HealthOptions, { typeField: \"readinessCheckType\", field: \"readiness\", step: step, ide: this.props.ide }), React.createElement(\"div\", null,\r\n                    translation_service_1.translate('HELP_READINESS_TEXT'),\r\n                    React.createElement(\"br\", null),\r\n                    React.createElement(\"br\", null),\r\n                    this.props.sfLinkFactory(\"/docs/workflows#readiness\", translation_service_1.translate('HELP_READINESS_LINK')))),\r\n            this.sourceOptions &&\r\n                this.section(translation_service_1.translate('TITLE_SOURCE'), React.createElement(source_options_1.SourceOptions, { step: step, ide: this.props.ide }), React.createElement(\"div\", null,\r\n                    translation_service_1.translate('HELP_SOURCE_TEXT'),\r\n                    React.createElement(\"br\", null),\r\n                    React.createElement(\"br\", null),\r\n                    this.props.sfLinkFactory(\"/docs/workflows#source\", translation_service_1.translate('HELP_SOURCE_LINK')))),\r\n            this.failureOptions &&\r\n                this.section(translation_service_1.translate('TITLE_FAILURE'), React.createElement(failure_options_1.FailureOptions, { obj: step }), React.createElement(\"div\", null,\r\n                    translation_service_1.translate('HELP_FAILURE_TEXT'),\r\n                    React.createElement(\"br\", null),\r\n                    React.createElement(\"br\", null),\r\n                    this.props.sfLinkFactory(\"/docs/workflows#failure\", translation_service_1.translate('HELP_FAILURE_LINK')))),\r\n            this.environmentConfigured &&\r\n                this.section(translation_service_1.translate('TITLE_ENVIRONMENT'), React.createElement(variables_editor_1.VariablesEditor, { variables: step.environment, ide: this.props.ide, sourceEditorFactory: variable_editor_1.variableEditorFactory, sourceFactory: variable_editor_1.variableSourceFactory }), React.createElement(\"div\", null,\r\n                    translation_service_1.translate('HELP_ENVIRONMENT_TEXT'),\r\n                    React.createElement(\"br\", null),\r\n                    React.createElement(\"br\", null),\r\n                    this.props.sfLinkFactory(\"/docs/workflows#environment\", translation_service_1.translate('HELP_ENVIRONMENT_LINK')))),\r\n            this.volumesConfigured &&\r\n                this.section(translation_service_1.translate('TITLE_VOLUMES'), React.createElement(volume_options_1.VolumeOptions, { step: step, ide: this.props.ide }), React.createElement(\"div\", null,\r\n                    translation_service_1.translate('HELP_VOLUMES_TEXT'),\r\n                    React.createElement(\"br\", null),\r\n                    React.createElement(\"br\", null),\r\n                    this.props.sfLinkFactory(\"/docs/workflows#volumes\", translation_service_1.translate('HELP_VOLUMES_LINK')))),\r\n            this.portsConfigured &&\r\n                this.section(translation_service_1.translate('TITLE_PORTS'), React.createElement(variables_editor_1.VariablesEditor, { variables: step.ports, onlyPairs: true, ide: this.props.ide, sourceEditorFactory: port_editor_1.portEditorFactory, sourceFactory: port_editor_1.portEntrySourceFactory }), React.createElement(\"div\", null,\r\n                    translation_service_1.translate('HELP_PORTS_TEXT'),\r\n                    React.createElement(\"br\", null),\r\n                    React.createElement(\"br\", null),\r\n                    this.props.sfLinkFactory(\"/docs/workflows#ports\", translation_service_1.translate('HELP_PORTS_LINK')))),\r\n            items.length > 0 &&\r\n                React.createElement(drop_down_menu_1.DropDownMenu, { ide: this.props.ide, label: translation_service_1.translate('CONFIGURE'), items: items })));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], AdvancedOptions.prototype, \"setup\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Function]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], AdvancedOptions.prototype, \"runAction\", null);\r\nAdvancedOptions = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], AdvancedOptions);\r\nexports.AdvancedOptions = AdvancedOptions;\r\n",
dependencies: ["tslib","react","mobx","mobx-react","react-jss","./source-options","./failure-options","./variables-editor","./volume-options","./health-options","../drop-down-menu","../../services/translation-service","../../style","../../components/tooltip","../../components/step-editor/variable-editor","../../components/step-editor/port-editor"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689864,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
