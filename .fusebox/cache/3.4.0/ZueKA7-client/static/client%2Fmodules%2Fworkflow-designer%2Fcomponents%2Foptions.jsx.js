module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst React = require(\"react\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nlet injectSheet = require('react-jss').default;\r\nconst style_1 = require(\"../style\");\r\nconst activeOption = {\r\n    fontWeight: 'bold',\r\n    color: style_1.themeColors.fadedGreen,\r\n    borderBottom: 'solid 3px ' + style_1.themeColors.fadedGreen,\r\n    background: 'none'\r\n};\r\nconst activeSelectedOption = {\r\n    fontWeight: 'bold',\r\n    color: style_1.themeColors.darkerGreen,\r\n    borderBottom: 'solid 3px ' + style_1.themeColors.darkerGreen,\r\n    background: 'none'\r\n};\r\nconst styles = (theme) => {\r\n    let out;\r\n    if (theme.ide) {\r\n        out = {\r\n            optionsList: {\r\n                composes: 'btn-group'\r\n            },\r\n            option: {\r\n                composes: 'btn'\r\n            },\r\n            selected: {\r\n                composes: 'btn selected'\r\n            },\r\n            fullWidth: {\r\n                width: '100%'\r\n            },\r\n        };\r\n    }\r\n    else {\r\n        out = {\r\n            optionsList: {\r\n                composes: 'pure-menu-list select-list'\r\n            },\r\n            fullWidth: {\r\n                width: '100%'\r\n            },\r\n            option: {\r\n                composes: 'pure-menu-link',\r\n                color: '#aaa',\r\n                fontWeight: 'bold',\r\n                borderBottom: 'solid 3px transparent',\r\n                'a&': {\r\n                    color: '#aaa',\r\n                },\r\n                '&:hover': activeOption,\r\n                '&:focus': {\r\n                    background: 'none',\r\n                    color: '#aaa',\r\n                    fontWeight: 'bold'\r\n                }\r\n            },\r\n            selected: {\r\n                composes: 'pure-menu-link',\r\n                borderBottom: 'solid 3px ' + style_1.themeColors.darkerGreen,\r\n                color: style_1.themeColors.darkerGreen,\r\n                fontWeight: 'bold',\r\n                'a&': {\r\n                    color: style_1.themeColors.darkerGreen\r\n                },\r\n                '&:hover': activeSelectedOption,\r\n                '&:focus': activeSelectedOption\r\n            }\r\n        };\r\n    }\r\n    Object.assign(out, {\r\n        'options-1': optionStyle(1),\r\n        'options-2': optionStyle(2),\r\n        'options-3': optionStyle(3),\r\n        'options-4': optionStyle(4),\r\n        'options-5': optionStyle(5),\r\n        'options-6': optionStyle(6),\r\n    });\r\n    return out;\r\n};\r\nfunction optionStyle(optionNumber) {\r\n    return {\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        float: 'left',\r\n        [style_1.mediaQueries.md]: {\r\n            width: (100 / optionNumber).toPrecision(5) + '%',\r\n        }\r\n    };\r\n}\r\nlet Options = class Options extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    optionClass(option) {\r\n        let classes = this.props.classes || {};\r\n        return this.props.selected === option.value ? classes.selected : classes.option;\r\n    }\r\n    setSelected(e, option) {\r\n        if (this.props.onChange) {\r\n            this.props.onChange(option);\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    option(option, key) {\r\n        let optionCount = this.props.options.length, classes = this.props.classes;\r\n        return this.props.ide ?\r\n            (React.createElement(\"button\", { key: key, className: [this.optionClass(option), classes['options-' + optionCount]].join(' '), onClick: e => this.setSelected(e, option) }, option.display)) :\r\n            (React.createElement(\"li\", { key: key, className: ['pure-menu-item', classes['options-' + optionCount]].join(' '), onClick: e => this.setSelected(e, option) },\r\n                React.createElement(\"a\", { href: \"#\", className: this.optionClass(option) }, option.display)));\r\n    }\r\n    render() {\r\n        let classes = this.props.classes || {};\r\n        return this.props.ide ?\r\n            (React.createElement(\"div\", { className: `block ${this.props.className || ''}` },\r\n                React.createElement(\"div\", { className: [classes.optionsList, this.props.fill ? classes.fullWidth : ''].join(' ') }, this.props.options && this.props.options.map((o, i) => this.option(o, i))))) :\r\n            (React.createElement(\"div\", { className: `block pure-menu pure-menu-horizontal ${this.props.className || ''}` },\r\n                React.createElement(\"ul\", { className: [classes.optionsList, this.props.fill ? classes.fullWidth : ''].join(' ') }, this.props.options && this.props.options.map((o, i) => this.option(o, i)))));\r\n    }\r\n};\r\nOptions = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], Options);\r\nexports.Options = Options;\r\n",
dependencies: ["tslib","react","mobx-react","react-jss","../style"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689830,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
