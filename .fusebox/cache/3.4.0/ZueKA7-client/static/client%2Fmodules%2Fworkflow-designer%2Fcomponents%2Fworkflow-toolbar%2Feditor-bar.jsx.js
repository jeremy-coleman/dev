module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst path = require(\"path\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst React = require(\"react\");\r\nconst mobx_1 = require(\"mobx\");\r\nlet injectSheet = require('react-jss').default;\r\nconst fa_1 = require(\"react-icons/fa\");\r\nconst styles = (theme) => ({\r\n    editorBar: {\r\n        composes: 'pure-menu pure-menu-horizontal',\r\n        borderBottom: 'solid 1px #ddd',\r\n    },\r\n    editorBarInner: {\r\n        composes: 'pure-menu-heading',\r\n        fontWeight: '700',\r\n        width: '100%',\r\n        background: 'white'\r\n    },\r\n    projectMenu: {\r\n        composes: 'pure-menu-list'\r\n    },\r\n    workflowTabs: {\r\n        composes: 'pure-menu-list',\r\n        float: 'right',\r\n        marginRight: '2em'\r\n    },\r\n    menuItem: {\r\n        composes: 'pure-menu-item'\r\n    },\r\n    menuItemWithChildren: {\r\n        composes: 'pure-menu-item pure-menu-has-children pure-menu-allow-hover'\r\n    },\r\n    menuItemActive: {\r\n        composes: 'pure-menu-item pure-menu-selected'\r\n    },\r\n    menuLink: {\r\n        composes: 'pure-menu-link',\r\n        '&:focus': {\r\n            background: 'none'\r\n        }\r\n    },\r\n    menuNonLink: {\r\n        composes: 'pure-menu-link',\r\n        cursor: 'auto',\r\n        '&:hover': {\r\n            background: 'none'\r\n        },\r\n        '&:active': {\r\n            background: 'none'\r\n        }\r\n    }\r\n});\r\nlet EditorBar = class EditorBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    save(e) {\r\n        if (this.props.save) {\r\n            this.props.save();\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    blankNew(e) {\r\n        if (this.props.newWorkflow) {\r\n            this.props.newWorkflow();\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    openNew(e) {\r\n        if (this.props.openWorkflow) {\r\n            this.props.openWorkflow();\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    openExisting(workflow, e) {\r\n        if (this.props.openWorkflow) {\r\n            this.props.openWorkflow(path.join(this.props.uiState.projectPath, workflow + '.wflow'));\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    get multipleWorkflows() {\r\n        return this.props.uiState && this.props.uiState.projectWorkflows && this.props.uiState.projectWorkflows.length > 1;\r\n    }\r\n    get existingWorkflow() {\r\n        return this.props.uiState && this.props.uiState.projectPath && this.props.uiState.projectPath.length > 0;\r\n    }\r\n    get yamlMode() {\r\n        return this.props.uiState && this.props.uiState.yaml;\r\n    }\r\n    setMode(e, yaml) {\r\n        if (this.props.modeChanged) {\r\n            this.props.modeChanged(yaml);\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    render() {\r\n        let classes = this.props.classes || {};\r\n        return React.createElement(\"div\", { className: classes.editorBar },\r\n            React.createElement(\"div\", { className: classes.editorBarInner },\r\n                React.createElement(\"ul\", { className: classes.projectMenu },\r\n                    React.createElement(\"li\", { className: classes.menuItem },\r\n                        React.createElement(\"a\", { href: \"#\", className: classes.menuLink, onClick: e => this.blankNew(e) },\r\n                            React.createElement(fa_1.FaFileAlt, null))),\r\n                    React.createElement(\"li\", { className: classes.menuItem },\r\n                        React.createElement(\"a\", { href: \"#\", className: classes.menuLink, onClick: e => this.openNew(e) },\r\n                            React.createElement(fa_1.FaFolderOpen, null))),\r\n                    this.existingWorkflow && React.createElement(\"li\", { className: classes.menuItem }, this.props.uiState &&\r\n                        React.createElement(\"span\", { title: this.props.uiState.projectPath, className: classes.menuNonLink },\r\n                            this.props.uiState.projectName,\r\n                            \" >\\u00A0\")),\r\n                    !this.existingWorkflow && React.createElement(\"li\", { className: classes.menuItem }, this.props.uiState &&\r\n                        React.createElement(\"span\", { title: this.props.uiState.projectPath, className: classes.menuNonLink },\r\n                            \"New Workflow\",\r\n                            this.props.dirty && React.createElement(\"span\", null, \"*\"))),\r\n                    this.existingWorkflow && React.createElement(\"li\", { className: this.multipleWorkflows ? classes.menuItemWithChildren : classes.menuItem },\r\n                        this.multipleWorkflows &&\r\n                            React.createElement(\"a\", { href: \"#\", className: classes.menuLink },\r\n                                this.props.uiState.workflowName,\r\n                                this.existingWorkflow && this.props.dirty && React.createElement(\"span\", null, \"*\")),\r\n                        !this.multipleWorkflows &&\r\n                            React.createElement(\"span\", { title: this.props.uiState.projectPath, className: classes.menuNonLink },\r\n                                this.props.uiState.workflowName,\r\n                                this.existingWorkflow && this.props.dirty && React.createElement(\"span\", null, \"*\")),\r\n                        this.multipleWorkflows &&\r\n                            React.createElement(\"ul\", { className: \"pure-menu-children\" }, this.props.uiState.projectWorkflows.map((workflow, i) => React.createElement(\"li\", { className: classes.menuItem, key: 'wflow-' + i },\r\n                                React.createElement(\"a\", { href: \"#\", onClick: e => this.openExisting(workflow, e), className: classes.menuLink }, workflow))))),\r\n                    this.props.dirty &&\r\n                        React.createElement(\"li\", { className: classes.menuItem },\r\n                            React.createElement(\"a\", { href: \"#\", className: classes.menuLink, onClick: e => this.save(e) },\r\n                                React.createElement(fa_1.FaSave, null)))),\r\n                React.createElement(\"ul\", { className: classes.workflowTabs },\r\n                    React.createElement(\"li\", { className: this.yamlMode ? classes.menuItem : classes.menuItemActive },\r\n                        React.createElement(\"a\", { href: \"#\", onClick: e => this.setMode(e, false), className: classes.menuLink }, \"Workflow\")),\r\n                    React.createElement(\"li\", { className: this.yamlMode ? classes.menuItemActive : classes.menuItem },\r\n                        React.createElement(\"a\", { href: \"#\", onClick: e => this.setMode(e, true), className: classes.menuLink }, \"YAML\")))));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof React !== \"undefined\" && React.MouseEvent) === \"function\" ? _a : Object, Boolean]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], EditorBar.prototype, \"setMode\", null);\r\nEditorBar = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], EditorBar);\r\nexports.EditorBar = EditorBar;\r\n",
dependencies: ["tslib","path","mobx-react","react","mobx","react-jss","react-icons/fa"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400690059,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
