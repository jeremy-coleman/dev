module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a;\r\nconst fs = require(\"fs\");\r\nconst React = require(\"react\");\r\nconst ReactDOM = require(\"react-dom\");\r\nconst mobx_1 = require(\"mobx\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nlet injectSheet = require('react-jss').default;\r\nlet jss = require('react-jss/lib/jss').default, JssProvider = require('react-jss').JssProvider, ThemeProvider = require('react-jss').ThemeProvider, jssComposer = require('jss-compose').default, jssNested = require('jss-nested').default;\r\nrequire(\"../../style/less/website.less\");\r\nrequire(\"codemirror/mode/yaml/yaml\");\r\nconst editor_bar_1 = require(\"./editor-bar\");\r\nconst designer_state_1 = require(\"./designer-state\");\r\nconst react_codemirror2_1 = require(\"react-codemirror2\");\r\nconst workflow_editor_1 = require(\"../workflow-editor\");\r\nvar electron = require('electron');\r\nvar currentWindow = electron.remote.getCurrentWindow();\r\njss.use(jssComposer());\r\njss.use(jssNested());\r\nconst styles = (theme) => ({\r\n    editorContainer: {},\r\n    editorBody: {\r\n        padding: '63px 0 0 0',\r\n    },\r\n    editor: {\r\n        composes: 'editor',\r\n        fontFamily: 'Courier New',\r\n        fontSize: '16px',\r\n        '& .CodeMirror': {\r\n            position: 'fixed',\r\n            top: '53px',\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            height: 'auto'\r\n        },\r\n        '& .CodeMirror-lines': {\r\n            paddingTop: '30px'\r\n        }\r\n    },\r\n    downloadSection: {\r\n        composes: 'links',\r\n        padding: '0 20px 0 0'\r\n    },\r\n    button: {\r\n        marginTop: '15px',\r\n        textAlign: 'center'\r\n    },\r\n    title: {\r\n        fontWeight: '700',\r\n        margin: '40px 0 10px 0'\r\n    },\r\n    errAlert: {\r\n        position: 'fixed',\r\n        top: '53px',\r\n        right: 0,\r\n        left: 0,\r\n        zIndex: 1,\r\n        background: '#ffae9c',\r\n        color: '#730f0f',\r\n        display: 'block',\r\n        textAlign: 'center',\r\n        padding: '3px',\r\n        borderBottom: '2px solid #ca1212',\r\n    }\r\n});\r\nlet DesignerScreen = class DesignerScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.designerState = new designer_state_1.DesignerState();\r\n    }\r\n    componentDidMount() {\r\n        if (currentWindow.args) {\r\n            let args = currentWindow.args;\r\n            if (args.length && args.length > 1) {\r\n                try {\r\n                    if (fs.statSync(args[1]).isFile()) {\r\n                        this.designerState.openWorkflow(args[1]);\r\n                    }\r\n                }\r\n                catch (e) { }\r\n            }\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.designerState.onDestroy();\r\n    }\r\n    setMode(yamlMode) {\r\n        this.designerState.setMode(yamlMode);\r\n    }\r\n    runDirtyFileCheck() {\r\n        if (this.designerState.dirty) {\r\n            let currentWindow = electron.remote.getCurrentWindow();\r\n            let response = electron.remote.dialog.showMessageBox(currentWindow, {\r\n                type: 'warning',\r\n                buttons: ['Yes', 'No'],\r\n                defaultId: 0,\r\n                cancelId: -1,\r\n                title: 'Workflow modified',\r\n                message: 'Do you want to save changes to the current workflow?'\r\n            });\r\n            if (response == -1) {\r\n                return false;\r\n            }\r\n            else if (response == 0) {\r\n                this.designerState.saveWorkflow();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    render() {\r\n        let classes = this.props.classes || {};\r\n        return React.createElement(\"div\", { className: classes.editorContainer },\r\n            React.createElement(editor_bar_1.EditorBar, { uiState: this.designerState.uiState, modeChanged: yaml => this.setMode(yaml), openWorkflow: (workflow) => this.designerState.openWorkflow(workflow), newWorkflow: () => this.designerState.newWorkflow(), save: () => this.designerState.saveWorkflow(), dirty: this.designerState.dirty }),\r\n            this.designerState.uiState.yamlError &&\r\n                React.createElement(\"div\", { className: classes.errAlert }, \"An error occured while parsing the yaml content. Please review your workflow file.\"),\r\n            React.createElement(\"div\", { className: classes.editorBody },\r\n                !this.designerState.uiState.yaml &&\r\n                    React.createElement(workflow_editor_1.WorkflowEditor, { state: this.designerState.editorState, workflow: this.designerState.editorState.workflow }),\r\n                this.designerState.uiState.yaml &&\r\n                    React.createElement(react_codemirror2_1.Controlled, { className: classes.editor, value: this.designerState.yaml, onBeforeChange: (_, __, yaml) => this.designerState.updateYaml(yaml, true), options: { lineNumbers: true, mode: 'yaml', theme: 'elegant', indentWithTabs: false, tabSize: 2 } })));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", typeof (_a = typeof designer_state_1.DesignerState !== \"undefined\" && designer_state_1.DesignerState) === \"function\" ? _a : Object)\r\n], DesignerScreen.prototype, \"designerState\", void 0);\r\nDesignerScreen = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], DesignerScreen);\r\nexports.DesignerScreen = DesignerScreen;\r\n;\r\nlet DesignerApp = class DesignerApp extends React.Component {\r\n    constructor(props, context) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        let theme = {};\r\n        return (React.createElement(JssProvider, { jss: jss },\r\n            React.createElement(ThemeProvider, { theme: theme },\r\n                React.createElement(DesignerScreen, null))));\r\n    }\r\n};\r\nDesignerApp = tslib_1.__decorate([\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object])\r\n], DesignerApp);\r\nexports.DesignerApp = DesignerApp;\r\nfunction render() {\r\n    let theme = {};\r\n    ReactDOM.render(React.createElement(JssProvider, { jss: jss },\r\n        React.createElement(ThemeProvider, { theme: theme },\r\n            React.createElement(DesignerScreen, null))), document.getElementById('app'));\r\n}\r\nexports.render = render;\r\n",
dependencies: ["tslib","fs","react","react-dom","mobx","mobx-react","react-jss","react-jss/lib/jss","react-jss","react-jss","jss-compose","jss-nested","../../style/less/website.less","codemirror/mode/yaml/yaml","./editor-bar","./designer-state","react-codemirror2","../workflow-editor","electron"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400690038,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
