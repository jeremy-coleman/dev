module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst RatingControl_1 = require(\"./RatingControl\");\r\nconst ratingControlTester_1 = require(\"./ratingControlTester\");\r\nconst forms_core_1 = require(\"../forms-core\");\r\nexports.schema = {\r\n    cogliteInput: {\r\n        title: \"Input Value\",\r\n        type: \"object\",\r\n        properties: {\r\n            inject: {\r\n                type: \"string\",\r\n            },\r\n        },\r\n        required: [\"inject\"],\r\n    },\r\n    cogliteFunctionMath: {\r\n        title: \"Math Function\",\r\n        type: \"object\",\r\n        properties: {\r\n            operator: {\r\n                type: \"string\",\r\n                label: \"Operator\",\r\n                enum: [\"Add\", \"Subtract\", \"Divide\", \"Multiply\"],\r\n            },\r\n            operand: {\r\n                type: \"string\",\r\n            },\r\n        },\r\n    },\r\n    cogliteDebug: {\r\n        title: \"Debug\",\r\n        type: \"object\",\r\n        properties: {\r\n            \"selectable\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            output: {\r\n                type: \"string\"\r\n            },\r\n        },\r\n    },\r\n};\r\nexports.uischema = {\r\n    cogliteInput: {\r\n        type: \"Group\",\r\n        label: \"Input Value\",\r\n        elements: [\r\n            {\r\n                type: \"VerticalLayout\",\r\n                elements: [\r\n                    {\r\n                        type: \"Control\",\r\n                        scope: \"#/properties/inject\",\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    cogliteFunctionMath: {\r\n        type: \"Group\",\r\n        label: \"Math Function\",\r\n        elements: [\r\n            {\r\n                type: \"VerticalLayout\",\r\n                elements: [\r\n                    {\r\n                        type: \"Control\",\r\n                        scope: \"#/properties/operator\",\r\n                    },\r\n                    {\r\n                        type: \"Control\",\r\n                        scope: \"#/properties/operand\",\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    cogliteDebug: {\r\n        type: \"Group\",\r\n        label: \"Debug\",\r\n        elements: [\r\n            {\r\n                type: \"VerticalLayout\",\r\n                elements: [\r\n                    {\r\n                        \"type\": \"Control\",\r\n                        \"label\": false,\r\n                        \"scope\": \"#/properties/selectable\"\r\n                    },\r\n                    {\r\n                        type: \"Control\",\r\n                        scope: \"#/properties/output\",\r\n                        \"rule\": {\r\n                            \"effect\": \"DISABLE\",\r\n                            \"condition\": {\r\n                                \"type\": \"LEAF\",\r\n                                \"scope\": \"#/properties/selectable\",\r\n                                \"expectedValue\": true\r\n                            }\r\n                        }\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n};\r\nexports.data = {};\r\nexports.setupStore = () => {\r\n    const jsonFormsSetStore = forms_core_1.initializeStore();\r\n    forms_core_1.setData(exports.data, jsonFormsSetStore);\r\n    forms_core_1.setFields(forms_core_1.materialFields, jsonFormsSetStore);\r\n    forms_core_1.setRenderers(forms_core_1.materialRenderers, jsonFormsSetStore);\r\n    forms_core_1.registerRenderer(ratingControlTester_1.default, RatingControl_1.default, jsonFormsSetStore);\r\n    return jsonFormsSetStore;\r\n};\r\n",
dependencies: ["./RatingControl","./ratingControlTester","../forms-core"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689232,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
