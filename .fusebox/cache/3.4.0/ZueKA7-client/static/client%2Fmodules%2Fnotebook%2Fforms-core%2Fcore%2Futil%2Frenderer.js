module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst _ = require(\"lodash\");\r\nconst __1 = require(\"../\");\r\nconst util_1 = require(\"../util\");\r\nconst storeUtil_1 = require(\"../util/storeUtil\");\r\nexports.isPlainLabel = (label) => {\r\n    return typeof label === 'string';\r\n};\r\nexports.mapStoreValuesToRendererProps = (store, ownProps) => ({\r\n    renderers: store.rendererStore.renderers || [],\r\n    schema: ownProps.schema || store.coreStore.extractSchema,\r\n    uischema: ownProps.uischema || store.coreStore.extractUiSchema,\r\n    path: ownProps.path\r\n});\r\nexports.mapStoreValuesToLayoutProps = (store, ownProps) => {\r\n    const visible = _.has(ownProps, 'visible') ? ownProps.visible : util_1.isVisible(ownProps, store);\r\n    return {\r\n        renderers: store.rendererStore.renderers,\r\n        visible,\r\n        path: ownProps.path,\r\n        uischema: ownProps.uischema,\r\n        schema: ownProps.schema\r\n    };\r\n};\r\nconst isRequired = (schema, schemaPath) => {\r\n    const pathSegments = schemaPath.split('/');\r\n    const lastSegment = pathSegments[pathSegments.length - 1];\r\n    const nextHigherSchemaSegments = pathSegments.slice(0, pathSegments.length - 2);\r\n    const nextHigherSchemaPath = nextHigherSchemaSegments.join('/');\r\n    const nextHigherSchema = util_1.Resolve.schema(schema, nextHigherSchemaPath);\r\n    return nextHigherSchema !== undefined\r\n        && nextHigherSchema.required !== undefined\r\n        && nextHigherSchema.required.indexOf(lastSegment) !== -1;\r\n};\r\nexports.computeLabel = (label, required) => {\r\n    return required ? label + '*' : label;\r\n};\r\nexports.isDescriptionHidden = (visible, description, isFocused) => {\r\n    return description === undefined ||\r\n        (description !== undefined && !visible) ||\r\n        !isFocused;\r\n};\r\nexports.mapStoreValuesToControlProps = (store, ownProps) => {\r\n    const path = util_1.composeWithUi(ownProps.uischema, ownProps.path);\r\n    const visible = _.has(ownProps, 'visible') ? ownProps.visible : util_1.isVisible(ownProps, store);\r\n    const enabled = _.has(ownProps, 'enabled') ? ownProps.enabled : util_1.isEnabled(ownProps, store);\r\n    const labelDesc = util_1.createLabelDescriptionFrom(ownProps.uischema);\r\n    const label = labelDesc.show ? labelDesc.text : '';\r\n    const errors = __1.getErrorAt(path, store).map(error => error.message);\r\n    const controlElement = ownProps.uischema;\r\n    const id = controlElement.scope || '';\r\n    const required = controlElement.scope !== undefined && isRequired(ownProps.schema, controlElement.scope);\r\n    const resolvedSchema = util_1.Resolve.schema(ownProps.schema, controlElement.scope);\r\n    const description = resolvedSchema !== undefined ? resolvedSchema.description : '';\r\n    const defaultConfig = _.cloneDeep(store.configStore.config);\r\n    const config = _.merge(defaultConfig, controlElement.options);\r\n    return {\r\n        data: util_1.Resolve.data(store.coreStore.extractData, path),\r\n        description,\r\n        errors,\r\n        label,\r\n        visible,\r\n        enabled,\r\n        id,\r\n        path,\r\n        parentPath: ownProps.path,\r\n        required,\r\n        scopedSchema: resolvedSchema,\r\n        uischema: ownProps.uischema,\r\n        schema: ownProps.schema,\r\n        config\r\n    };\r\n};\r\nexports.mapUpdateActionToControlProps = (jsonFormsStore) => ({\r\n    handleChange(path, value) {\r\n        storeUtil_1.updateStore(path, () => value, jsonFormsStore);\r\n    }\r\n});\r\nexports.mapStoreValuesToTableControlProps = (store, ownProps) => {\r\n    const _a = exports.mapStoreValuesToControlProps(store, ownProps), { path } = _a, props = tslib_1.__rest(_a, [\"path\"]);\r\n    const controlElement = ownProps.uischema;\r\n    const resolvedSchema = util_1.Resolve.schema(ownProps.schema, controlElement.scope + '/items');\r\n    const childErrors = __1.getSubErrorsAt(path, store);\r\n    return Object.assign({}, props, { scopedSchema: resolvedSchema, path,\r\n        childErrors });\r\n};\r\nexports.mapUpdateActionToTableControlProps = (jsonFormsStore) => ({\r\n    addItem: (path) => () => {\r\n        storeUtil_1.updateStore(path, array => {\r\n            if (array === undefined || array === null) {\r\n                return [{}];\r\n            }\r\n            array.push({});\r\n            return array;\r\n        }, jsonFormsStore);\r\n    },\r\n    removeItems: (path, toDelete) => () => {\r\n        storeUtil_1.updateStore(path, array => {\r\n            const clone = _.clone(array);\r\n            toDelete.forEach(s => clone.splice(clone.indexOf(s), 1));\r\n            return clone;\r\n        }, jsonFormsStore);\r\n    }\r\n});\r\n",
dependencies: ["tslib","lodash","../","../util","../util/storeUtil"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689458,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
