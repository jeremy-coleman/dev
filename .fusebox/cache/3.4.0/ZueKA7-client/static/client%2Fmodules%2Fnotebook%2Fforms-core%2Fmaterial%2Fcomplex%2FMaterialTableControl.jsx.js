module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst core_1 = require(\"@material-ui/core\");\r\nconst _ = require(\"lodash\");\r\nconst React = require(\"react\");\r\nconst core_2 = require(\"../../core\");\r\nconst react_1 = require(\"../../react\");\r\nconst ValidationIcon_1 = require(\"./ValidationIcon\");\r\nconst generateCells = (Cell, scopedSchema, rowPath, cellErrors) => Object.keys(scopedSchema.properties)\r\n    .filter(prop => scopedSchema.properties[prop].type !== 'array')\r\n    .map(prop => {\r\n    const cellPath = core_2.Paths.compose(rowPath, prop);\r\n    const props = {\r\n        cellProperty: prop,\r\n        scopedSchema,\r\n        rowPath,\r\n        cellPath,\r\n        errors: cellErrors\r\n    };\r\n    return React.createElement(Cell, Object.assign({ key: cellPath }, props));\r\n});\r\nconst EmptyTable = () => (React.createElement(core_1.TableRow, null,\r\n    React.createElement(core_1.TableCell, null, \"No data\")));\r\nconst TableHeaderCell = ({ cellProperty }) => React.createElement(core_1.TableCell, null, _.capitalize(cellProperty));\r\nconst TableContentCell = ({ rowPath, cellProperty, cellPath, errors, scopedSchema }) => {\r\n    const cellErrors = errors\r\n        .filter(error => error.dataPath === cellPath)\r\n        .map(error => error.message);\r\n    const createControlElement = (key) => ({\r\n        type: 'Control',\r\n        label: false,\r\n        scope: `#/properties/${key}`\r\n    });\r\n    return (React.createElement(core_1.TableCell, null,\r\n        React.createElement(core_1.Grid, { container: true, alignItems: 'center', justify: 'center', spacing: 0 },\r\n            React.createElement(core_1.Grid, { item: true, xs: 1 },\r\n                React.createElement(ValidationIcon_1.ValidationIcon, { id: `tooltip-${cellPath}`, errorMessages: cellErrors })),\r\n            React.createElement(core_1.Grid, { item: true, xs: true },\r\n                React.createElement(react_1.DispatchField, { schema: scopedSchema, uischema: createControlElement(cellProperty), path: rowPath })))));\r\n};\r\nconst TableWithContent = tableProps => {\r\n    const { data, path, scopedSchema, childErrors, select, isSelected } = tableProps;\r\n    return data.map((_child, index) => {\r\n        const childPath = core_2.Paths.compose(path, `${index}`);\r\n        const selected = isSelected(index);\r\n        return (React.createElement(core_1.TableRow, { key: childPath, hover: true, selected: selected },\r\n            React.createElement(core_1.TableCell, { padding: 'checkbox' },\r\n                React.createElement(core_1.Checkbox, { checked: selected, onChange: e => select(e, index) })),\r\n            generateCells(TableContentCell, scopedSchema, childPath, childErrors)));\r\n    });\r\n};\r\nexports.MaterialTableControl = props => {\r\n    const { data, path, scopedSchema, numSelected, selectAll } = props;\r\n    const isEmptyTable = !data || !Array.isArray(data) || data.length === 0;\r\n    const rowCount = data ? data.length : 0;\r\n    return (React.createElement(core_1.Table, null,\r\n        React.createElement(core_1.TableHead, null,\r\n            React.createElement(core_1.TableRow, null,\r\n                React.createElement(core_1.TableCell, { padding: 'checkbox', style: { width: '1em' } },\r\n                    React.createElement(core_1.Checkbox, { indeterminate: numSelected > 0 && numSelected < rowCount, checked: numSelected === rowCount, onChange: selectAll })),\r\n                generateCells(TableHeaderCell, scopedSchema, path))),\r\n        React.createElement(core_1.TableBody, null, isEmptyTable ? React.createElement(EmptyTable, null) : React.createElement(TableWithContent, Object.assign({}, props)))));\r\n};\r\n",
dependencies: ["@material-ui/core","lodash","react","../../core","../../react","./ValidationIcon"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689515,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
