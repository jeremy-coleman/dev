module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst React = require(\"react\");\r\nconst mobx_1 = require(\"mobx\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst react_virtualized_select_1 = require(\"react-virtualized-select\");\r\nlet injectSheet = require('react-jss').default;\r\nconst translation_service_1 = require(\"../../services/translation-service\");\r\nconst style_1 = require(\"../../style\");\r\nconst centered_content_1 = require(\"../../util/centered-content\");\r\nconst jssStyles = (theme) => ({\r\n    select: {\r\n        composes: `${style_1.editorStyles.largeSelect} ${style_1.editorStyles.imageSelect}`,\r\n        '& .Select-control .Select-value': {\r\n            paddingLeft: '160px'\r\n        },\r\n        '& .Select-menu-outer $option': {\r\n            paddingLeft: '160px'\r\n        },\r\n    },\r\n    title: {\r\n        composes: theme.ide ? 'text-color' : '',\r\n        padding: 0,\r\n        margin: 0,\r\n        fontSize: '20px',\r\n        fontWeight: 'bold',\r\n        lineHeight: '24px'\r\n    },\r\n    placeholder: {\r\n        composes: theme.ide ? 'text-color' : '',\r\n        padding: 0,\r\n        margin: 0,\r\n        fontSize: '16px',\r\n        lineHeight: '24px'\r\n    },\r\n    description: {\r\n        composes: theme.ide ? 'text-color' : '',\r\n        paddingRight: '20px',\r\n        margin: 0,\r\n        fontSize: '14px',\r\n        lineHeight: '16px',\r\n        whiteSpace: 'normal'\r\n    },\r\n    logo: {\r\n        position: 'absolute',\r\n        top: '10px',\r\n        bottom: '10px',\r\n        left: '20px',\r\n        width: '120px',\r\n        backgroundSize: 'contain',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: '50%',\r\n        backgroundColor: 'white',\r\n        border: '3px solid white',\r\n    },\r\n    option: {\r\n        cursor: 'pointer',\r\n        margin: 0,\r\n        padding: '0 20px',\r\n    },\r\n    selected: {\r\n        composes: 'selected',\r\n    },\r\n    focused: {\r\n        composes: 'focused',\r\n    }\r\n});\r\nconst catalogBase = 'https://s3-eu-west-1.amazonaws.com/dev.stack.foundation/catalog/';\r\nclass ImageOption {\r\n    constructor(option) {\r\n        Object.assign(this, option);\r\n    }\r\n}\r\nlet CatalogSelect = class CatalogSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.valueRenderer = (option) => {\r\n            const classes = this.props.classes || {};\r\n            return (React.createElement(centered_content_1.CenteredContent, { container: false },\r\n                React.createElement(\"div\", { className: classes.title }, option.image.title),\r\n                React.createElement(\"div\", { className: classes.description }, option.image.description),\r\n                React.createElement(\"div\", { className: classes.logo, style: { backgroundImage: 'url(' + catalogBase + option.image.name + '.png)' } })));\r\n        };\r\n        this.optionRenderer = (options) => {\r\n            let option = options.option;\r\n            const classes = this.props.classes || {}, focused = options.focusedOption == option, selected = options.valueArray.indexOf(option) > -1;\r\n            return (React.createElement(centered_content_1.CenteredContent, { className: `${classes.option} ${focused ? classes.focused : ''} ${selected ? classes.selected : ''}`, key: options.key, onClick: () => options.selectValue(option), onMouseOver: () => options.focusOption(option), style: options.style },\r\n                React.createElement(\"div\", { className: classes.title }, option.image.title),\r\n                React.createElement(\"div\", { className: classes.description }, option.image.description),\r\n                React.createElement(\"div\", { className: classes.logo, style: { backgroundImage: 'url(' + catalogBase + option.image.name + '.png)' } })));\r\n        };\r\n    }\r\n    get options() {\r\n        return this.props.catalog ?\r\n            this.props.catalog\r\n                .sort((a, b) => a.title.localeCompare(b.title))\r\n                .map(image => new ImageOption({ image: image, value: image.name })) :\r\n            [];\r\n    }\r\n    get selectedOption() {\r\n        return this.options.find(el => el.image.name === this.props.value);\r\n    }\r\n    placeholder() {\r\n        return (React.createElement(centered_content_1.CenteredContent, null,\r\n            React.createElement(\"div\", { className: this.props.classes.placeholder }, translation_service_1.translate('PLACEHOLDER_IMAGE'))));\r\n    }\r\n    render() {\r\n        const classes = this.props.classes || {};\r\n        return (React.createElement(react_virtualized_select_1.default, { className: `native-key-bindings ${classes.select} ${this.props.className || ''}`, options: this.options, optionRenderer: this.optionRenderer, searchable: false, optionHeight: 100, placeholder: this.placeholder(), maxHeight: 400, clearable: false, valueRenderer: this.valueRenderer, onChange: option => this.props.onChange(option.image), value: this.selectedOption }));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.computed,\r\n    tslib_1.__metadata(\"design:type\", Object),\r\n    tslib_1.__metadata(\"design:paramtypes\", [])\r\n], CatalogSelect.prototype, \"options\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.computed,\r\n    tslib_1.__metadata(\"design:type\", Object),\r\n    tslib_1.__metadata(\"design:paramtypes\", [])\r\n], CatalogSelect.prototype, \"selectedOption\", null);\r\nCatalogSelect = tslib_1.__decorate([\r\n    injectSheet(jssStyles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], CatalogSelect);\r\nexports.CatalogSelect = CatalogSelect;\r\n",
dependencies: ["tslib","react","mobx","mobx-react","react-virtualized-select","react-jss","../../services/translation-service","../../style","../../util/centered-content"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689796,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
