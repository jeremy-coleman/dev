module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nvar _a, _b;\r\nconst React = require(\"react\");\r\nlet injectSheet = require('react-jss').default;\r\nconst mobx_1 = require(\"mobx\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst options_1 = require(\"../options\");\r\nconst centered_content_1 = require(\"../../util/centered-content\");\r\nconst translation_service_1 = require(\"../../services/translation-service\");\r\nconst workflow_1 = require(\"../../models/workflow\");\r\nconst variables_editor_1 = require(\"../../components/step-editor/variables-editor\");\r\nconst variable_editor_1 = require(\"../../components/step-editor/variable-editor\");\r\nconst styles = (theme) => ({\r\n    labelContainer: {\r\n        textAlign: 'right'\r\n    },\r\n    smallLabelContainer: {\r\n        composes: '$labelContainer pure-u-1-6'\r\n    },\r\n    largeLabelContainer: {\r\n        composes: '$labelContainer pure-u-5-6'\r\n    },\r\n    healthNumberPropDiv: {\r\n        composes: 'pure-u-1 pure-u-lg-1-2 block'\r\n    },\r\n    healthNumberPropFieldDiv: {\r\n        composes: 'pure-u-1-6'\r\n    },\r\n    healthNumberPropField: {\r\n        composes: 'pure-input-1 input-text native-key-bindings'\r\n    },\r\n    headersTitle: {\r\n        composes: theme.ide ? 'tab-border' : '',\r\n        marginTop: '0px',\r\n        borderBottomWidth: '1px',\r\n        borderBottomStyle: 'solid',\r\n        paddingBottom: '5px',\r\n        fontSize: '1em'\r\n    },\r\n    label: {\r\n        paddingRight: '5px'\r\n    }\r\n});\r\nlet HealthOptions = class HealthOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    get typeField() {\r\n        let field = this.props.typeField || 'healthCheckType';\r\n        return this.props.step.transient[field];\r\n    }\r\n    get healthField() {\r\n        let field = this.props.field || 'health';\r\n        if (this.props.step[field].skipWait !== undefined) {\r\n            return this.props.step[field];\r\n        }\r\n        else {\r\n            return this.props.step[field];\r\n        }\r\n    }\r\n    get isReadiness() {\r\n        return this.healthField.skipWait !== undefined;\r\n    }\r\n    get currentHealthCheckType() {\r\n        if (this.props.step) {\r\n            if (this.typeField) {\r\n                return this.typeField;\r\n            }\r\n            else if (this.healthField && this.healthField.type) {\r\n                return this.healthField.type;\r\n            }\r\n        }\r\n        return 'script';\r\n    }\r\n    setHealthCheckType(checkType) {\r\n        let field = this.props.typeField || 'healthCheckType';\r\n        this.props.step.transient[field] = checkType;\r\n    }\r\n    healthCheckTypes() {\r\n        return workflow_1.HealthTypes.map(type => ({\r\n            value: type,\r\n            display: (React.createElement(\"span\", null, translation_service_1.translate('OPTION_' + type.toUpperCase())))\r\n        }));\r\n    }\r\n    scriptTypeEditor() {\r\n        let classes = this.props.classes || {};\r\n        return (React.createElement(\"div\", { className: \"pure-g\" },\r\n            React.createElement(\"label\", { className: classes.smallLabelContainer },\r\n                React.createElement(centered_content_1.CenteredContent, null,\r\n                    React.createElement(\"span\", { className: classes.label },\r\n                        translation_service_1.translate('LABEL_SCRIPT'),\r\n                        \":\"))),\r\n            React.createElement(\"div\", { className: \"pure-u-5-6\" },\r\n                React.createElement(\"input\", { className: \"pure-input-1 input-text native-key-bindings\", type: \"text\", value: this.healthField.script || \"\", onChange: e => this.setHealthCheckProperty(() => this.healthField.script = e.target.value) }))));\r\n    }\r\n    requestTypeEditor(checkType) {\r\n        let classes = this.props.classes || {};\r\n        return (React.createElement(\"div\", { className: \"pure-g\" },\r\n            React.createElement(\"label\", { className: classes.smallLabelContainer },\r\n                React.createElement(centered_content_1.CenteredContent, null,\r\n                    React.createElement(\"span\", { className: classes.label },\r\n                        translation_service_1.translate('LABEL_PORT'),\r\n                        \":\"))),\r\n            React.createElement(\"div\", { className: checkType === \"tcp\" ? \"pure-u-5-6\" : \"pure-u-1-3\" },\r\n                React.createElement(\"input\", { className: \"pure-input-1 input-text native-key-bindings\", type: \"text\", value: this.healthField.port || \"\", onChange: e => this.setHealthCheckProperty(() => this.healthField.port = e.target.value) })),\r\n            checkType !== \"tcp\" &&\r\n                (React.createElement(\"label\", { className: classes.smallLabelContainer },\r\n                    React.createElement(centered_content_1.CenteredContent, null,\r\n                        React.createElement(\"span\", { className: classes.label },\r\n                            translation_service_1.translate('LABEL_PATH'),\r\n                            \":\")))),\r\n            checkType !== \"tcp\" &&\r\n                (React.createElement(\"div\", { className: \"pure-u-1-3\" },\r\n                    React.createElement(\"input\", { className: \"pure-input-1 input-text native-key-bindings\", type: \"text\", value: this.healthField.path, onChange: e => this.setHealthCheckProperty(() => this.healthField.path = e.target.value) })))));\r\n    }\r\n    selectedEditor() {\r\n        let type = this.currentHealthCheckType;\r\n        return (React.createElement(\"div\", { className: \"pure-u-1 block\" }, type && (type === 'script' ? this.scriptTypeEditor() : this.requestTypeEditor(type))));\r\n    }\r\n    setHealthCheckProperty(setter) {\r\n        setter();\r\n    }\r\n    toggleSkipWait(e) {\r\n        this.healthField.skipWait = e.currentTarget.checked;\r\n    }\r\n    get skipWait() {\r\n        return this.healthField.skipWait === true;\r\n    }\r\n    healthCheckNumberProperty(property) {\r\n        let classes = this.props.classes || {};\r\n        let onNumberChange = (property, e) => {\r\n            this.setHealthCheckProperty(() => {\r\n                let value = parseInt(e.target.value);\r\n                if (!isNaN(value)) {\r\n                    let stringVal = value;\r\n                    this.healthField[property] = value;\r\n                }\r\n            });\r\n        };\r\n        return (React.createElement(\"div\", { className: classes.healthNumberPropDiv },\r\n            React.createElement(\"div\", { className: \"pure-g\" },\r\n                React.createElement(\"label\", { className: classes.largeLabelContainer },\r\n                    React.createElement(centered_content_1.CenteredContent, null,\r\n                        React.createElement(\"span\", { className: classes.label },\r\n                            translation_service_1.translate('LABEL_' + property.toUpperCase()),\r\n                            \":\"))),\r\n                React.createElement(\"div\", { className: classes.healthNumberPropFieldDiv },\r\n                    React.createElement(\"input\", { type: \"text\", className: classes.healthNumberPropField, value: this.healthField[property] || \"\", onChange: e => this.setHealthCheckProperty(() => this.healthField[property] = parseInt(e.target.value)) })))));\r\n    }\r\n    render() {\r\n        let classes = this.props.classes || {};\r\n        return (React.createElement(\"div\", { className: \"pure-g\" },\r\n            React.createElement(\"div\", { className: \"pure-u-1 block\" },\r\n                React.createElement(options_1.Options, { ide: this.props.ide, fill: true, options: this.healthCheckTypes(), onChange: a => this.setHealthCheckType(a.value), selected: this.currentHealthCheckType })),\r\n            this.isReadiness &&\r\n                (React.createElement(\"div\", { className: \"pure-u-1 block\" },\r\n                    React.createElement(\"label\", { className: \"input-label\" },\r\n                        React.createElement(\"input\", { className: \"input-checkbox\", type: \"checkbox\", checked: this.skipWait, onChange: e => this.toggleSkipWait(e) }),\r\n                        ' ',\r\n                        translation_service_1.translate('OPTION_SKIP_WAIT')))),\r\n            this.selectedEditor(),\r\n            this.healthCheckNumberProperty('interval'),\r\n            this.healthCheckNumberProperty('retries'),\r\n            this.healthCheckNumberProperty('timeout'),\r\n            this.healthCheckNumberProperty('grace'),\r\n            (this.currentHealthCheckType === 'http' || this.currentHealthCheckType === 'https') &&\r\n                React.createElement(\"div\", { className: \"pure-u-1 block\" },\r\n                    React.createElement(\"h3\", { className: classes.headersTitle }, \"Headers\"),\r\n                    React.createElement(variables_editor_1.VariablesEditor, { variables: this.healthField.headers, ide: this.props.ide, onlyPairs: true, sourceEditorFactory: variable_editor_1.variableEditorFactory, sourceFactory: variable_editor_1.variableSourceFactory }))));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof workflow_1.HealthType !== \"undefined\" && workflow_1.HealthType) === \"function\" ? _a : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], HealthOptions.prototype, \"setHealthCheckType\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Function]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], HealthOptions.prototype, \"setHealthCheckProperty\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof React !== \"undefined\" && React.ChangeEvent) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], HealthOptions.prototype, \"toggleSkipWait\", null);\r\nHealthOptions = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], HealthOptions);\r\nexports.HealthOptions = HealthOptions;\r\n",
dependencies: ["tslib","react","react-jss","mobx","mobx-react","../options","../../util/centered-content","../../services/translation-service","../../models/workflow","../../components/step-editor/variables-editor","../../components/step-editor/variable-editor"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689897,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
