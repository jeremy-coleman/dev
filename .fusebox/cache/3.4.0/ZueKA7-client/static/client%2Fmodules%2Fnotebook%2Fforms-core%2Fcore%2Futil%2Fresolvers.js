module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _ = require(\"lodash\");\r\nconst isObject = (schema) => {\r\n    return schema.properties !== undefined;\r\n};\r\nconst isArray = (schema) => {\r\n    return schema.type === 'array' && schema.items !== undefined;\r\n};\r\nexports.resolveData = (instance, dataPath) => {\r\n    const dataPathSegments = dataPath.split('.');\r\n    if (_.isEmpty(dataPath)) {\r\n        return instance;\r\n    }\r\n    return dataPathSegments\r\n        .map(segment => decodeURIComponent(segment))\r\n        .reduce((curInstance, decodedSegment) => {\r\n        if (curInstance === undefined || !curInstance.hasOwnProperty(decodedSegment)) {\r\n            return undefined;\r\n        }\r\n        return curInstance[decodedSegment];\r\n    }, instance);\r\n};\r\nexports.findAllRefs = (schema, result = {}, resolveTuples = false) => {\r\n    if (isObject(schema)) {\r\n        Object.keys(schema.properties).forEach(key => exports.findAllRefs(schema.properties[key], result));\r\n    }\r\n    if (isArray(schema)) {\r\n        if (Array.isArray(schema.items)) {\r\n            if (resolveTuples) {\r\n                schema.items.forEach(child => exports.findAllRefs(child, result));\r\n            }\r\n        }\r\n        else {\r\n            exports.findAllRefs(schema.items, result);\r\n        }\r\n    }\r\n    if (Array.isArray(schema.anyOf)) {\r\n        schema.anyOf.forEach(child => exports.findAllRefs(child, result));\r\n    }\r\n    if (schema.$ref !== undefined) {\r\n        result[schema.$ref] = schema;\r\n    }\r\n    if (schema['links'] !== undefined) {\r\n        schema['links'].forEach(link => {\r\n            if (!_.isEmpty(link.targetSchema.$ref)) {\r\n                result[link.targetSchema.$ref] = schema;\r\n            }\r\n            else {\r\n                exports.findAllRefs(link.targetSchema, result);\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n};\r\nexports.resolveSchema = (schema, schemaPath) => {\r\n    if (_.isEmpty(schema)) {\r\n        return undefined;\r\n    }\r\n    const validPathSegments = schemaPath.split('/');\r\n    const invalidSegment = pathSegment => pathSegment === '#' || pathSegment === undefined || pathSegment === '';\r\n    const resultSchema = validPathSegments.reduce((curSchema, pathSegment) => invalidSegment(pathSegment) ? curSchema : curSchema[pathSegment], schema);\r\n    if (resultSchema !== undefined && resultSchema.$ref !== undefined) {\r\n        return retrieveResolvableSchema(schema, resultSchema.$ref);\r\n    }\r\n    return resultSchema;\r\n};\r\nfunction retrieveResolvableSchema(full, reference) {\r\n    const child = exports.resolveSchema(full, reference);\r\n    const allRefs = exports.findAllRefs(child);\r\n    const innerSelfReference = allRefs[reference];\r\n    if (innerSelfReference !== undefined) {\r\n        innerSelfReference.$ref = '#';\r\n    }\r\n    return child;\r\n}\r\n",
dependencies: ["lodash"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689466,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
