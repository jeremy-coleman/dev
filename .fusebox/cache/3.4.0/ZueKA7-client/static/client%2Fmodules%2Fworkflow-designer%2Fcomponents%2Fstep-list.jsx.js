module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst React = require(\"react\");\r\nconst mobx_1 = require(\"mobx\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst fa_1 = require(\"react-icons/fa\");\r\nconst go_1 = require(\"react-icons/go\");\r\nconst workflow_1 = require(\"../models/workflow\");\r\nconst translation_service_1 = require(\"../services/translation-service\");\r\nlet injectSheet = require('react-jss').default;\r\nconst style_1 = require(\"../style\");\r\nconst stepListClass = 'step-list';\r\nconst styles = (theme) => {\r\n    let list = style_1.listStyles(theme), addButton = {\r\n        composes: theme.ide ? 'btn' : 'pure-button success',\r\n        display: 'block',\r\n        position: 'relative',\r\n        backgroundColor: theme.ide ? undefined : '#f5f5f5',\r\n        '& > div': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0\r\n        },\r\n        [style_1.mediaQueries.md]: {\r\n            marginRight: theme.ide ? '0px' : '20px',\r\n        },\r\n        '& svg': {\r\n            position: 'relative',\r\n            top: '-0.15em',\r\n        },\r\n    }, deleteButton = Object.assign({}, addButton, {\r\n        composes: theme.ide ? 'btn btn-error' : 'pure-button danger',\r\n    });\r\n    list.listItemSelected['& $stepError'] = {\r\n        color: list.listItemSelected.color\r\n    };\r\n    let styles = {\r\n        addButton,\r\n        deleteButton,\r\n        deleteStepDeleting: {\r\n            composes: theme.ide ? '' : 'pure-button-hover',\r\n        },\r\n        stepPrefix: {\r\n            fontWeight: 'bold'\r\n        },\r\n        hidden: {\r\n            display: 'none'\r\n        },\r\n        handle: Object.assign({\r\n            position: 'absolute !important',\r\n            top: '0px',\r\n            right: theme.ide ? '0px' : '25px',\r\n            cursor: 'move',\r\n        }, style_1.noSelectStyle),\r\n        handleIcon: {\r\n            composes: theme.ide ? 'icon icon-grabber' : '',\r\n        },\r\n        handleDragger: {\r\n            composes: 'dragula-handle',\r\n            position: 'absolute',\r\n            top: '0',\r\n            bottom: '0',\r\n            left: '0',\r\n            right: '0',\r\n        },\r\n        stepError: {\r\n            composes: theme.ide ? 'text-color-error' : '',\r\n            color: theme.ide ? undefined : style_1.themeColors.darkerRed,\r\n            marginRight: '5px'\r\n        }\r\n    };\r\n    return Object.assign(list, styles);\r\n};\r\nlet StepList = class StepList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dragging: false,\r\n            deleting: false\r\n        };\r\n        this.addStep = () => {\r\n            this.props.state.workflow.addStep();\r\n        };\r\n        this.onDragEnd = (el) => {\r\n            this.setState({ dragging: false, deleting: false });\r\n        };\r\n        this.onDrop = (el, target, source, sibling) => {\r\n            if (!this.state.deleting) {\r\n                this.drake.cancel(true);\r\n                let siblingStep = sibling && sibling.relatedStep, parentStep = target.parentStep;\r\n                let targetIndex = siblingStep ? this.props.state.workflow.findStep(siblingStep, parentStep).index : parentStep.steps.length;\r\n                this.props.state.workflow.moveStep(el.relatedStep, targetIndex, parentStep);\r\n            }\r\n            else {\r\n                this.drake.cancel(true);\r\n            }\r\n        };\r\n        this.onDrag = (el, source) => {\r\n            if (source.classList.contains(stepListClass)) {\r\n                this.setState({ dragging: true });\r\n            }\r\n        };\r\n        this.onCancel = (el, container, source) => {\r\n            if (this.state.deleting) {\r\n                this.props.state.deleteStep(el.relatedStep);\r\n            }\r\n        };\r\n        this.setStep = (el, parent, step) => {\r\n            if (el) {\r\n                if (parent) { }\r\n                el.relatedStep = step;\r\n            }\r\n        };\r\n    }\r\n    get currentStep() {\r\n        return this.props.state.currentStep;\r\n    }\r\n    get workflow() {\r\n        return this.props.state.workflow;\r\n    }\r\n    selectStep(step, event) {\r\n        this.props.state.selectStep(step);\r\n        this.props.onStepSelect && this.props.onStepSelect(step);\r\n        event.stopPropagation();\r\n    }\r\n    stepPrefix(parentList, index) {\r\n        if (index === 0) {\r\n            return '';\r\n        }\r\n        else if (parentList[index - 1].type === \"sequential\") {\r\n            let step = parentList[index - 1];\r\n            if (step.type === 'sequential') {\r\n                return 'Then';\r\n            }\r\n            else if (step.type === 'parallel') {\r\n                return 'And';\r\n            }\r\n            else if (step.type === 'service') {\r\n                return 'After ready';\r\n            }\r\n        }\r\n        else if (parentList[index - 1].type === 'compound') {\r\n            let compoundStep = parentList[index - 1];\r\n            if (compoundStep.steps.length > 0) {\r\n                return this.stepPrefix(compoundStep.steps, compoundStep.steps.length);\r\n            }\r\n            else {\r\n                return this.stepPrefix(parentList, index - 1);\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    componentWillUnmount() {\r\n    }\r\n    stepClasses(step) {\r\n        let classes = this.props.classes || {};\r\n        try {\r\n            return classes.listItem +\r\n                (this.currentStep === step ? ' ' + classes.listItemSelected : '') +\r\n                (step.type == 'compound' ? ' ' + classes.listItemSubList : '');\r\n        }\r\n        catch (e) {\r\n            throw (e);\r\n        }\r\n    }\r\n    stepTitle(parentList, step, key) {\r\n        let classes = this.props.classes || {}, prefix = this.stepPrefix(parentList, key);\r\n        return (React.createElement(\"span\", null,\r\n            step.transient.parseError.length > 0 && !step.transient.errorsDismissed && React.createElement(go_1.GoAlert, { className: classes.stepError }),\r\n            prefix.length > 0 && React.createElement(\"span\", { className: classes.stepPrefix },\r\n                this.stepPrefix(parentList, key),\r\n                \"\\u00A0\"),\r\n            step.name && step.name.length > 0 ? step.name : '(Unnamed step)'));\r\n    }\r\n    StepHandle() {\r\n        return React.createElement(\"div\", { className: this.props.classes.handle },\r\n            React.createElement(\"div\", { className: this.props.classes.handleDragger }),\r\n            this.props.state.ide ? React.createElement(\"span\", { className: this.props.classes.handleIcon }) : React.createElement(fa_1.FaBars, { className: this.props.classes.handleIcon }));\r\n    }\r\n    subSteps(parent) {\r\n        let classes = this.props.classes || {};\r\n        let rootList = parent instanceof workflow_1.Workflow;\r\n        if (parent instanceof workflow_1.WorkflowStepCompound || parent instanceof workflow_1.Workflow) {\r\n            return (React.createElement(\"ul\", { className: `${stepListClass} ${rootList ? classes.rootListTree : classes.listTree}`, ref: el => el && (el.parentStep = parent) }, parent.steps.map((step, i) => (React.createElement(\"li\", { className: this.stepClasses(step), key: 'step-' + i + '-' + step.name, ref: el => this.setStep(el, parent, step), onClick: e => this.selectStep(step, e) },\r\n                this.stepTitle(parent.steps, step, i),\r\n                this.StepHandle(),\r\n                step instanceof workflow_1.WorkflowStepCompound && this.subSteps(step))))));\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        const classes = this.props.classes || {};\r\n        return (React.createElement(\"div\", null,\r\n            this.subSteps(this.props.state.workflow),\r\n            React.createElement(\"div\", { ref: (div) => { this.deleteDiv = div; }, onClick: this.addStep, className: [\r\n                    stepListClass,\r\n                    (this.state.dragging ? classes.deleteButton : classes.addButton),\r\n                    (this.state.deleting ? classes.deleteStepDeleting : '')\r\n                ].join(' ') },\r\n                this.state.dragging ?\r\n                    React.createElement(\"span\", null,\r\n                        React.createElement(fa_1.FaTrash, null),\r\n                        translation_service_1.translate('DELETE'),\r\n                        \"...\") :\r\n                    React.createElement(\"span\", null,\r\n                        React.createElement(go_1.GoPlus, null),\r\n                        \" \",\r\n                        translation_service_1.translate('ADD_STEP'),\r\n                        \"...\"),\r\n                React.createElement(\"div\", null))));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Object)\r\n], StepList.prototype, \"addStep\", void 0);\r\nStepList = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], StepList);\r\nexports.StepList = StepList;\r\n",
dependencies: ["tslib","react","mobx","mobx-react","react-icons/fa","react-icons/go","../models/workflow","../services/translation-service","react-jss","../style"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400690008,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
