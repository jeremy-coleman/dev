module.exports = { contents: "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst React = require(\"react\");\r\nlet injectSheet = require('react-jss').default;\r\nconst mobx_1 = require(\"mobx\");\r\nconst mobx_react_1 = require(\"mobx-react\");\r\nconst centered_content_1 = require(\"../../util/centered-content\");\r\nconst translation_service_1 = require(\"../../services/translation-service\");\r\nconst react_select_1 = require(\"react-select\");\r\nconst styles = (theme) => ({\r\n    labelContainer: {\r\n        composes: 'pure-u-1-3',\r\n        textAlign: 'right'\r\n    },\r\n    fieldContainer: {\r\n        composes: 'pure-u-2-3'\r\n    },\r\n    doubleLabelContainer: {\r\n        composes: 'pure-u-1-3 pure-u-lg-1-6',\r\n        textAlign: 'right'\r\n    },\r\n    doubleFieldContainer: {\r\n        composes: 'pure-u-2-3 pure-u-lg-5-6'\r\n    },\r\n    label: {\r\n        paddingRight: '5px'\r\n    },\r\n    input: {\r\n        composes: `code pure-input-1 input-text native-key-bindings`\r\n    }\r\n});\r\nclass PortEntrySource {\r\n    constructor() {\r\n        this.name = '';\r\n    }\r\n}\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], PortEntrySource.prototype, \"name\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", Number)\r\n], PortEntrySource.prototype, \"containerPort\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", Number)\r\n], PortEntrySource.prototype, \"internalPort\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", Number)\r\n], PortEntrySource.prototype, \"externalPort\", void 0);\r\ntslib_1.__decorate([\r\n    mobx_1.observable,\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], PortEntrySource.prototype, \"protocol\", void 0);\r\nexports.PortEntrySource = PortEntrySource;\r\nfunction portEntrySourceFactory() {\r\n    return new PortEntrySource();\r\n}\r\nexports.portEntrySourceFactory = portEntrySourceFactory;\r\nfunction portEditorFactory(source, state) {\r\n    return React.createElement(PortEditor, { source: source, onChange: () => state.commitIfNecessary() });\r\n}\r\nexports.portEditorFactory = portEditorFactory;\r\nlet PortEditor = class PortEditor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    notifyChange() {\r\n        if (this.props.onChange) {\r\n            this.props.onChange();\r\n        }\r\n    }\r\n    setName(name) {\r\n        this.props.source.name = name;\r\n        this.notifyChange();\r\n    }\r\n    setContainerPort(value) {\r\n        if (this.props.source.containerPort !== value) {\r\n            this.props.source.containerPort = value;\r\n            this.notifyChange();\r\n        }\r\n    }\r\n    setInternalPort(value) {\r\n        if (this.props.source.internalPort !== value) {\r\n            this.props.source.internalPort = value;\r\n            this.notifyChange();\r\n        }\r\n    }\r\n    setExternalPort(value) {\r\n        if (this.props.source.externalPort !== value) {\r\n            this.props.source.externalPort = value;\r\n            this.notifyChange();\r\n        }\r\n    }\r\n    setProtocol(value) {\r\n        this.props.source.protocol = value;\r\n        this.notifyChange();\r\n    }\r\n    render() {\r\n        let classes = this.props.classes || {};\r\n        let portProtocols = [{ label: 'tcp', value: 'tcp' }, { label: 'udp', value: 'udp' }];\r\n        return React.createElement(\"div\", null,\r\n            React.createElement(\"div\", { className: \"pure-g block not-block-md\" },\r\n                React.createElement(\"div\", { className: \"pure-u-1 pure-u-lg-1-2 block-md\" },\r\n                    React.createElement(\"div\", { className: \"pure-g\" },\r\n                        React.createElement(\"label\", { className: classes.labelContainer },\r\n                            React.createElement(centered_content_1.CenteredContent, null,\r\n                                React.createElement(\"span\", { className: classes.label },\r\n                                    translation_service_1.translate('LABEL_CONTAINER_PORT'),\r\n                                    \":\"))),\r\n                        React.createElement(\"div\", { className: classes.fieldContainer },\r\n                            React.createElement(\"input\", { className: classes.input, type: \"text\", value: this.props.source.containerPort || '', onChange: e => this.setContainerPort(parseInt(e.target.value)) })))),\r\n                React.createElement(\"div\", { className: \"pure-u-1 pure-u-lg-1-2 block-md\" },\r\n                    React.createElement(\"div\", { className: \"pure-g\" },\r\n                        React.createElement(\"label\", { className: classes.labelContainer },\r\n                            React.createElement(centered_content_1.CenteredContent, null,\r\n                                React.createElement(\"span\", { className: classes.label },\r\n                                    translation_service_1.translate('LABEL_INTERNAL_PORT'),\r\n                                    \":\"))),\r\n                        React.createElement(\"div\", { className: classes.fieldContainer },\r\n                            React.createElement(\"input\", { className: classes.input, type: \"text\", value: this.props.source.internalPort || '', onChange: e => this.setInternalPort(parseInt(e.target.value)) }))))),\r\n            React.createElement(\"div\", { className: \"pure-g block not-block-md\" },\r\n                React.createElement(\"div\", { className: \"pure-u-1 block-md\" },\r\n                    React.createElement(\"div\", { className: \"pure-g\" },\r\n                        React.createElement(\"label\", { className: classes.doubleLabelContainer },\r\n                            React.createElement(centered_content_1.CenteredContent, null,\r\n                                React.createElement(\"span\", { className: classes.label },\r\n                                    translation_service_1.translate('LABEL_NAME'),\r\n                                    \":\"))),\r\n                        React.createElement(\"div\", { className: classes.doubleFieldContainer },\r\n                            React.createElement(\"input\", { className: classes.input, type: \"text\", value: this.props.source.name || '', onChange: e => this.setName(e.target.value) }))))),\r\n            React.createElement(\"div\", { className: \"pure-g\" },\r\n                React.createElement(\"div\", { className: \"pure-u-1 pure-u-lg-1-2 block-md\" },\r\n                    React.createElement(\"div\", { className: \"pure-g\" },\r\n                        React.createElement(\"label\", { className: classes.labelContainer },\r\n                            React.createElement(centered_content_1.CenteredContent, null,\r\n                                React.createElement(\"span\", { className: classes.label },\r\n                                    translation_service_1.translate('LABEL_EXTERNAL_PORT'),\r\n                                    \":\"))),\r\n                        React.createElement(\"div\", { className: classes.fieldContainer },\r\n                            React.createElement(\"input\", { className: classes.input, type: \"text\", value: this.props.source.externalPort || '', onChange: e => this.setExternalPort(parseInt(e.target.value)) })))),\r\n                React.createElement(\"div\", { className: \"pure-u-1 pure-u-lg-1-2 block-md\" },\r\n                    React.createElement(\"div\", { className: \"pure-g\" },\r\n                        React.createElement(\"label\", { className: classes.labelContainer },\r\n                            React.createElement(centered_content_1.CenteredContent, null,\r\n                                React.createElement(\"span\", { className: classes.label },\r\n                                    translation_service_1.translate('LABEL_PROTOCOL'),\r\n                                    \":\"))),\r\n                        React.createElement(\"div\", { className: classes.fieldContainer },\r\n                            React.createElement(react_select_1.default, { className: classes.tagSelect, clearable: false, searchable: false, options: portProtocols, onChange: option => this.setProtocol(option.value), value: this.props.source.protocol || 'tcp' }))))));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], PortEditor.prototype, \"setName\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Number]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], PortEditor.prototype, \"setContainerPort\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Number]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], PortEditor.prototype, \"setInternalPort\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Number]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], PortEditor.prototype, \"setExternalPort\", null);\r\ntslib_1.__decorate([\r\n    mobx_1.action,\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], PortEditor.prototype, \"setProtocol\", null);\r\nPortEditor = tslib_1.__decorate([\r\n    injectSheet(styles),\r\n    mobx_react_1.observer,\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\r\n], PortEditor);\r\nexports.PortEditor = PortEditor;\r\n",
dependencies: ["tslib","react","react-jss","mobx","mobx-react","../../util/centered-content","../../services/translation-service","react-select"],
sourceMap: {},
headerContent: undefined,
mtime: 1535400689904,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
