{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.96feb516.map","sourceRoot":"..\\src","sourcesContent":["import { Post } from '@coglite/shared';\r\n\r\nfunction renderPost(post: Post) {\r\n  const header = document.createElement('h1');\r\n  header.textContent = post.name;\r\n\r\n  const body = document.createElement('div');\r\n  body.textContent = post.body;\r\n\r\n  const container = document.createElement('div');\r\n  container.appendChild(header);\r\n  container.appendChild(body);\r\n\r\n  return container;\r\n}\r\n\r\nasync function init() {\r\n  const result = await fetch('/api/posts');\r\n  const posts = (await result.json()) as Post[];\r\n\r\n  const root = document.getElementById('root');\r\n\r\n  if (!root) {\r\n    throw new Error('No root');\r\n  }\r\n\r\n  for (const post of posts) {\r\n    root.appendChild(renderPost(post));\r\n  }\r\n}\r\n\r\ninit();\r\n"]}